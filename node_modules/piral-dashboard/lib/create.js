"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDashboardApi = void 0;
const actions = require("./actions");
const piral_core_1 = require("piral-core");
const default_1 = require("./default");
const Dashboard_1 = require("./Dashboard");
function getPreferences(defaultPreferences, customPreferences = {}) {
    return Object.assign(Object.assign({}, defaultPreferences), customPreferences);
}
function getTiles(items, defaultPreferences) {
    const tiles = {};
    let i = 0;
    for (const { component, preferences } of items) {
        tiles[`global-${i++}`] = {
            pilet: undefined,
            component,
            preferences: getPreferences(defaultPreferences, preferences),
        };
    }
    return tiles;
}
function withTiles(tiles) {
    return (state) => (Object.assign(Object.assign({}, state), { components: Object.assign({ DashboardTile: default_1.DefaultTile, DashboardContainer: default_1.DefaultContainer }, state.components), registry: Object.assign(Object.assign({}, state.registry), { tiles }) }));
}
/**
 * Creates the Pilet API extension for activating dashboard support.
 */
function createDashboardApi(config = {}) {
    const { tiles = [], defaultPreferences = {} } = config;
    return (context) => {
        context.defineActions(actions);
        context.dispatch((0, piral_core_1.withAll)(withTiles(getTiles(tiles, defaultPreferences)), (0, piral_core_1.withRootExtension)('piral-dashboard', Dashboard_1.Dashboard)));
        return (api, target) => {
            const pilet = target.name;
            let next = 0;
            return {
                registerTile(name, arg, preferences) {
                    if (typeof name !== 'string') {
                        preferences = arg;
                        arg = name;
                        name = next++;
                    }
                    const id = (0, piral_core_1.buildName)(pilet, name);
                    context.registerTile(id, {
                        pilet,
                        component: (0, piral_core_1.withApi)(context, arg, api, 'tile'),
                        preferences: getPreferences(defaultPreferences, preferences),
                    });
                    return () => api.unregisterTile(name);
                },
                unregisterTile(name) {
                    const id = (0, piral_core_1.buildName)(pilet, name);
                    context.unregisterTile(id);
                },
            };
        };
    };
}
exports.createDashboardApi = createDashboardApi;
//# sourceMappingURL=create.js.map