"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateFeed = exports.loadedFeed = exports.loadFeed = exports.destroyFeed = exports.createFeed = void 0;
const piral_core_1 = require("piral-core");
function createFeed(ctx, id) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { feeds: (0, piral_core_1.withKey)(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: false,
        }) })));
}
exports.createFeed = createFeed;
function destroyFeed(ctx, id) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { feeds: (0, piral_core_1.withoutKey)(state.feeds, id) })));
}
exports.destroyFeed = destroyFeed;
function loadFeed(ctx, options) {
    const { id } = options;
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { feeds: (0, piral_core_1.withKey)(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: true,
        }) })));
    return options.initialize().then((baseData) => {
        loadedFeed(ctx, id, baseData, undefined);
        options.dispose = options.connect((item) => {
            updateFeed(ctx, id, item, options.update);
        });
    }, (err) => loadedFeed(ctx, id, undefined, err));
}
exports.loadFeed = loadFeed;
function loadedFeed(ctx, id, data, error) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { feeds: (0, piral_core_1.withKey)(state.feeds, id, {
            loading: false,
            loaded: true,
            error,
            data,
        }) })));
}
exports.loadedFeed = loadedFeed;
function updateFeed(ctx, id, item, reducer) {
    const feed = ctx.readState((state) => state.feeds[id]);
    const result = reducer(feed.data, item);
    if (result instanceof Promise) {
        return result
            .then((data) => loadedFeed(ctx, id, data, undefined))
            .catch((error) => loadedFeed(ctx, id, undefined, error));
    }
    else if (result !== feed.data) {
        loadedFeed(ctx, id, result, undefined);
    }
}
exports.updateFeed = updateFeed;
//# sourceMappingURL=actions.js.map