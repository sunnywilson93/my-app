#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const path_1 = require("path");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const root = process.cwd();
const args = yargs
    .describe('name', 'Sets the name of the module.')
    .string('name')
    .default('name', getName(root))
    .describe('files', 'Sets the files referenced by TypeScript.')
    .array('files')
    .default('files', [])
    .required('files')
    .describe('types', 'Sets the type entry modules to export via their file path.')
    .array('types')
    .default('types', [])
    .describe('apis', 'Sets the interfaces to include using "InterfaceName:FilePath" syntax.')
    .array('apis')
    .default('apis', [])
    .describe('imports', 'Sets the imports to avoid bundling in via their package names.')
    .array('imports')
    .default('imports', [])
    .describe('ignore', 'Actively uses the ignore comment to drop properties.')
    .boolean('ignore')
    .default('ignore', true)
    .describe('out', 'Sets the path to the output file.')
    .string('out')
    .default('out', './dist/index.d.ts').argv;
function getName(dir) {
    const location = path_1.resolve(dir, 'package.json');
    if (!fs_1.existsSync(location)) {
        const parent = path_1.resolve(dir, '..');
        if (parent !== dir) {
            return getName(parent);
        }
        return undefined;
    }
    return require(location).name;
}
function getApiDecl(api) {
    const [name, file] = api.split(':');
    return { name, file };
}
function writeFile(path, content) {
    const full = path_1.resolve(root, path);
    const dir = path_1.dirname(full);
    if (!fs_1.existsSync(dir)) {
        fs_1.mkdirSync(dir, { recursive: true });
    }
    fs_1.writeFileSync(full, content, 'utf8');
}
function runScript(script, cwd) {
    return new Promise((resolve, reject) => {
        const cp = child_process_1.exec(script, { cwd });
        cp.on('close', (code, signal) => (code === 0 ? resolve() : reject(new Error(signal))));
    });
}
function runCli() {
    writeFile(args.out, require('./index').generateDeclaration({
        root,
        name: args.name,
        apis: args.apis.map(getApiDecl),
        files: args.files,
        imports: args.imports,
        types: args.types,
        noIgnore: !args.ignore,
    }));
}
if (!args.name) {
    console.error('Please provide a name for the module.');
    process.exit(1);
}
if (args.files.length === 0) {
    console.error('At least one input file expected.');
    process.exit(1);
}
try {
    require('typescript');
    runCli();
}
catch (_a) {
    console.warn(`TypeScript is missing. Trying to install ...`);
    runScript('npm install typescript@3.x', path_1.resolve(__dirname, '..')).then(runCli);
}
