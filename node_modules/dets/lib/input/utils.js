"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackage = exports.isImportedFile = exports.getRef = exports.getDefault = exports.createBinding = void 0;
const helpers_1 = require("../helpers");
function createBinding(context, lib, name) {
    // if we did not use the given lib yet, add it to the used libs
    if (!context.usedImports.includes(lib)) {
        context.usedImports.push(lib);
    }
    return `${helpers_1.getLibRefName(lib)}.${name}`;
}
exports.createBinding = createBinding;
function getDefault(value) {
    return {
        kind: 'default',
        name: 'default',
        value,
    };
}
exports.getDefault = getDefault;
function getRef(refName, types = []) {
    return {
        kind: 'ref',
        refName,
        types,
    };
}
exports.getRef = getRef;
function getSymbolName(imports, node) {
    if (imports) {
        for (const name of Object.keys(imports)) {
            if (imports[name] === node) {
                return name;
            }
        }
    }
    return undefined;
}
function isImportedFile(node, root, imports) {
    var _a;
    const fn = (_a = node.getSourceFile()) === null || _a === void 0 ? void 0 : _a.fileName;
    if (fn) {
        const libName = helpers_1.getLibName(fn, root);
        return Object.keys(imports).some((name) => name === libName);
    }
    return false;
}
exports.isImportedFile = isImportedFile;
function getPackage(node, global, root, imports) {
    var _a;
    const fn = (_a = node.getSourceFile()) === null || _a === void 0 ? void 0 : _a.fileName;
    const base = helpers_1.isBaseLib(fn) || false;
    if (!base) {
        const libName = helpers_1.getLibName(fn, root);
        const [lib] = Object.keys(imports).filter((name) => {
            if (global) {
                return name === libName;
            }
            else {
                return Object.values(imports[name]).includes(node);
            }
        });
        const symbolName = getSymbolName(imports[lib], node);
        return {
            external: !!lib,
            moduleName: (lib && helpers_1.getModule(node)) || lib,
            symbolName,
            base,
            lib,
            fn,
        };
    }
    return {
        external: true,
        moduleName: undefined,
        symbolName: undefined,
        base,
        lib: undefined,
        fn,
    };
}
exports.getPackage = getPackage;
