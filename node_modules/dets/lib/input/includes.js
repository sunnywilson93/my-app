"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.includeProp = exports.includeClauses = void 0;
const ts = require("typescript");
const helpers_1 = require("../helpers");
function includeClauses(context, clauses, newClause, tags = []) {
    var _a;
    const types = [];
    for (const clause of newClause.types) {
        const decl = helpers_1.getDeclarationFromNode(context.checker, clause.expression);
        const name = (_a = decl === null || decl === void 0 ? void 0 : decl.symbol) === null || _a === void 0 ? void 0 : _a.name;
        // check if we should remove the clause
        if (decl && !tags.some((m) => m.name === 'dets_removeclause' && m.text === name)) {
            types.push(clause);
        }
    }
    clauses.push(Object.assign(Object.assign({}, newClause), { types: ts.createNodeArray(types) }));
}
exports.includeClauses = includeClauses;
function includeProp(props, newProp, tags = []) {
    const name = helpers_1.getPropName(newProp.name);
    // check if we should remove the prop
    if (tags.some((m) => m.name === 'dets_removeprop' && m.text === name)) {
        return;
    }
    for (const oldProp of props) {
        if (oldProp.kind === newProp.kind && helpers_1.getPropName(oldProp.name) === name) {
            if (!ts.isMethodSignature(newProp)) {
                return;
            }
        }
    }
    props.push(newProp);
}
exports.includeProp = includeProp;
