"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReadonly = exports.isProtected = exports.isStatic = exports.isPrivate = exports.isInferType = exports.isIdentifierType = exports.isUnionType = exports.isKeyOfType = exports.isNodeExported = exports.shouldInclude = exports.isDefaultExport = exports.getSymbol = exports.getDeclarationFromNode = exports.getDeclarationFromSymbol = exports.getModule = void 0;
const typescript_1 = require("typescript");
function getModule(node) {
    while (node) {
        // only string literal declared top-level modules are external modules
        if (typescript_1.isModuleDeclaration(node) && typescript_1.isSourceFile(node.parent) && typescript_1.isStringLiteral(node.name)) {
            return node.name.text;
        }
        node = node.parent;
    }
    return undefined;
}
exports.getModule = getModule;
function getDeclarationFromSymbol(checker, symbol) {
    var _a;
    if (!symbol) {
        return undefined;
    }
    else if (symbol.flags === typescript_1.SymbolFlags.Alias) {
        const aliasSymbol = checker.getAliasedSymbol(symbol);
        return getDeclarationFromSymbol(checker, aliasSymbol);
    }
    else {
        const decl = symbol.valueDeclaration || ((_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a[0]);
        if (decl && typescript_1.isImportSpecifier(decl)) {
            return getDeclarationFromNode(checker, decl.name);
        }
        return decl;
    }
}
exports.getDeclarationFromSymbol = getDeclarationFromSymbol;
function getDeclarationFromNode(checker, node) {
    const symbol = getSymbol(checker, node);
    return getDeclarationFromSymbol(checker, symbol);
}
exports.getDeclarationFromNode = getDeclarationFromNode;
function getSymbol(checker, node) {
    var _a, _b, _c;
    const symbol = (_a = node.aliasSymbol) !== null && _a !== void 0 ? _a : node.symbol;
    if (symbol) {
        return symbol;
    }
    else if (typescript_1.isTypeReferenceNode(node)) {
        const ref = node.typeName;
        return (_c = (_b = ref.aliasSymbol) !== null && _b !== void 0 ? _b : ref.symbol) !== null && _c !== void 0 ? _c : checker.getSymbolAtLocation(ref);
    }
    else {
        return checker.getSymbolAtLocation(node);
    }
}
exports.getSymbol = getSymbol;
function isDefaultExport(node) {
    var _a;
    return ((_a = node.symbol) === null || _a === void 0 ? void 0 : _a.name) === 'default';
}
exports.isDefaultExport = isDefaultExport;
function shouldInclude(node) {
    return typescript_1.isModuleDeclaration(node) || typescript_1.isExportDeclaration(node) || isNodeExported(node);
}
exports.shouldInclude = shouldInclude;
function isNodeExported(node, alsoTopLevel = false) {
    return (typescript_1.isExportAssignment(node) ||
        (typescript_1.getCombinedModifierFlags(node) & typescript_1.ModifierFlags.Export) !== 0 ||
        (alsoTopLevel && !!node.parent && node.parent.kind === typescript_1.SyntaxKind.SourceFile));
}
exports.isNodeExported = isNodeExported;
function isKeyOfType(type) {
    return type && typescript_1.isTypeOperatorNode(type) && type.operator === typescript_1.SyntaxKind.KeyOfKeyword;
}
exports.isKeyOfType = isKeyOfType;
function isUnionType(type) {
    return type && typescript_1.isUnionTypeNode(type);
}
exports.isUnionType = isUnionType;
function isIdentifierType(type) {
    return type && typescript_1.isTypeReferenceNode(type) && typescript_1.isIdentifier(type.typeName);
}
exports.isIdentifierType = isIdentifierType;
function isInferType(type) {
    return type && typescript_1.isInferTypeNode(type);
}
exports.isInferType = isInferType;
function isPrivate(type) {
    return type.kind === typescript_1.SyntaxKind.PrivateKeyword;
}
exports.isPrivate = isPrivate;
function isStatic(type) {
    return type.kind === typescript_1.SyntaxKind.StaticKeyword;
}
exports.isStatic = isStatic;
function isProtected(type) {
    return type.kind === typescript_1.SyntaxKind.ProtectedKeyword;
}
exports.isProtected = isProtected;
function isReadonly(type) {
    return type.kind === typescript_1.SyntaxKind.ReadonlyKeyword;
}
exports.isReadonly = isReadonly;
