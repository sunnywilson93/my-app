"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModifiers = exports.getSymbolName = exports.isGlobal = exports.fullyQualifiedName = void 0;
const typescript_1 = require("typescript");
const constants_1 = require("./constants");
const node_1 = require("./node");
function fullyQualifiedName(symbol, delimiter) {
    const parts = [];
    do {
        parts.push(symbol.name);
        symbol = symbol.parent;
    } while (symbol && symbol.flags === typescript_1.SymbolFlags.NamespaceModule && symbol.name !== constants_1.globalIndicator);
    return parts.reverse().join(delimiter);
}
exports.fullyQualifiedName = fullyQualifiedName;
function isGlobal(symbol) {
    const parent = symbol === null || symbol === void 0 ? void 0 : symbol.parent;
    if (parent) {
        if (parent.name === constants_1.globalIndicator) {
            return true;
        }
        return isGlobal(parent);
    }
    return false;
}
exports.isGlobal = isGlobal;
function getSymbolName(symbol) {
    if (symbol.flags === typescript_1.SymbolFlags.EnumMember) {
        return `${symbol.parent.name}.${symbol.name}`;
    }
    return symbol.name;
}
exports.getSymbolName = getSymbolName;
function getModifiers(symbol) {
    var _a, _b, _c;
    const decorators = [];
    if (symbol) {
        const modifiers = (_c = (_b = (_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.modifiers) !== null && _c !== void 0 ? _c : [];
        modifiers.some(node_1.isPrivate) && decorators.push('private');
        modifiers.some(node_1.isProtected) && decorators.push('protected');
        modifiers.some(node_1.isStatic) && decorators.push('static');
        modifiers.some(node_1.isReadonly) && decorators.push('readonly');
    }
    return decorators.join(' ');
}
exports.getModifiers = getModifiers;
