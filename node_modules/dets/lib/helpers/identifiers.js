"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalName = exports.getKeyName = exports.getLibName = exports.getParameterName = exports.getParameterElement = exports.getPropName = exports.getExportName = exports.getPredicateName = exports.getTypeRefName = exports.getLibRefName = exports.isAnonymous = void 0;
const typescript_1 = require("typescript");
const path_1 = require("path");
const constants_1 = require("./constants");
function isAnonymous(name) {
    return name === constants_1.anonymousIndicator;
}
exports.isAnonymous = isAnonymous;
function getLibRefName(libName) {
    if (libName[0] === '@') {
        libName = libName.substring(1);
    }
    const parts = libName.split(/[\/\-]/g);
    return parts.map(p => p[0].toUpperCase() + p.substring(1)).join('');
}
exports.getLibRefName = getLibRefName;
function getTypeRefName(name) {
    if (typescript_1.isIdentifier(name)) {
        return name.text;
    }
    else {
        // must be isQualifiedName(name)
        const ns = getTypeRefName(name.left);
        return `${ns}.${name.right.text}`;
    }
}
exports.getTypeRefName = getTypeRefName;
function getPredicateName(name) {
    if (typescript_1.isIdentifier(name)) {
        return name.text;
    } /* is ThisTypeNode */
    else {
        return 'this';
    }
}
exports.getPredicateName = getPredicateName;
function getExportName(name) {
    if (!name) {
        return undefined;
    }
    else if (typescript_1.isIdentifier(name)) {
        return name.text;
    }
    else if (typescript_1.isStringLiteral(name)) {
        return name.text;
    } /* is NumericLiteral */
    else {
        return name.text;
    }
}
exports.getExportName = getExportName;
function getPropName(name) {
    if (!name) {
        return undefined;
    }
    else if (typescript_1.isIdentifier(name)) {
        return name.text;
    }
    else if (typescript_1.isStringLiteral(name)) {
        return name.text;
    }
    else if (typescript_1.isNumericLiteral(name)) {
        return name.text;
    } /* isComputedPropertyName(name) */
    else {
        return name.getText();
    }
}
exports.getPropName = getPropName;
function getParameterElement(element) {
    return typescript_1.isBindingElement(element) ? getParameterName(element.name) : getParameterName(element);
}
exports.getParameterElement = getParameterElement;
function getParameterName(name) {
    if (typescript_1.isIdentifier(name)) {
        return name.text;
    }
    else if (typescript_1.isObjectBindingPattern(name)) {
        const content = name.elements.map(getParameterElement).join(', ');
        return `{ ${content} }`;
    }
    else if (typescript_1.isArrayBindingPattern(name)) {
        const content = name.elements.map(getParameterElement).join(', ');
        return `[${content}]`;
    } /* is OmittedExpression */
    else {
        return '';
    }
}
exports.getParameterName = getParameterName;
function makeModule(fileName, root) {
    const relFile = path_1.relative(root, fileName);
    const ext = path_1.extname(fileName);
    const file = !relFile.startsWith('.') ? `./${relFile}` : relFile;
    return file.substring(0, file.length - ext.length);
}
function getLibName(fileName, root) {
    if (fileName) {
        if (fileName.indexOf(constants_1.typesRoot) !== -1) {
            const start = fileName.lastIndexOf(constants_1.typesRoot) + constants_1.typesRoot.length;
            const name = fileName
                .substring(start)
                .split('/')
                .shift();
            if (name.indexOf('__') !== -1) {
                const [scope, lib] = name.split('__');
                return `@${scope}/${lib}`;
            }
            return name;
        }
        else if (fileName.indexOf(constants_1.modulesRoot) !== -1) {
            const start = fileName.lastIndexOf(constants_1.modulesRoot) + constants_1.modulesRoot.length;
            const [scope, lib] = fileName.substring(start).split('/');
            if (scope.indexOf('@') === 0) {
                return `${scope}/${lib}`;
            }
            return scope;
        }
        else {
            return makeModule(fileName, root);
        }
    }
    return undefined;
}
exports.getLibName = getLibName;
function getKeyName(info) {
    var _a, _b, _c, _d;
    return (_d = (_c = (_b = (_a = info === null || info === void 0 ? void 0 : info.declaration) === null || _a === void 0 ? void 0 : _a.parameters) === null || _b === void 0 ? void 0 : _b[0].name) === null || _c === void 0 ? void 0 : _c.text) !== null && _d !== void 0 ? _d : 'index';
}
exports.getKeyName = getKeyName;
function getGlobalName(symbol) {
    const { parent, name } = symbol;
    if (parent.name !== constants_1.globalIndicator) {
        return `${getGlobalName(parent)}.${name}`;
    }
    return name;
}
exports.getGlobalName = getGlobalName;
