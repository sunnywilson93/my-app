/**
 * Sets up a new PWA client by creating a service worker registration.
 * @param config
 */
export function setupPwaClient(config = {}) {
    const { onUpdate = (apply) => apply(), onUpdated = () => window.location.reload(), scope, notifications, install, } = config;
    if (notifications) {
        Notification.requestPermission();
    }
    const sw = new Promise((resolve) => {
        if ('serviceWorker' in navigator) {
            let shouldInstall = install;
            window.addEventListener('beforeinstallprompt', (ev) => {
                ev.preventDefault();
                if (shouldInstall) {
                    shouldInstall = false;
                    const listener = () => {
                        document.removeEventListener('click', listener);
                        ev.prompt();
                    };
                    document.addEventListener('click', listener);
                }
            });
            window.addEventListener('load', () => {
                resolve(require('../generators/worker.codegen')({
                    scope,
                }));
            });
        }
        else {
            resolve();
        }
    });
    const client = {
        use(action) {
            return sw.then((reg) => reg && action(reg));
        },
        update() {
            sw.then((reg) => reg && reg.update());
        },
    };
    const handleUpdating = (reg) => {
        const sw = reg.installing || reg.waiting;
        if (sw && !sw.onstatechange) {
            let ignoreWaiting = false;
            const onUpdateStateChange = () => {
                switch (sw.state) {
                    case 'installed':
                        ignoreWaiting &&
                            onUpdate(() => sw.postMessage({
                                action: 'skipWaiting',
                            }));
                    case 'installing':
                        break;
                    case 'activated':
                        onUpdated();
                    case 'redundant':
                        sw.onstatechange = undefined;
                        break;
                }
            };
            const onInstallStateChange = () => {
                switch (sw.state) {
                    case 'activated':
                    case 'redundant':
                        sw.onstatechange = undefined;
                        break;
                    case 'installing':
                    case 'installed':
                        break;
                }
            };
            if (reg.active) {
                onUpdateStateChange();
                sw.onstatechange = onUpdateStateChange;
            }
            else {
                onInstallStateChange();
                sw.onstatechange = onInstallStateChange;
            }
            if (reg.waiting) {
                ignoreWaiting = true;
            }
        }
    };
    client.use((reg) => {
        handleUpdating(reg);
        reg.onupdatefound = () => handleUpdating(reg);
    });
    return client;
}
//# sourceMappingURL=setup.js.map