"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMenuApi = void 0;
const actions = require("./actions");
const piral_core_1 = require("piral-core");
const default_1 = require("./default");
const Menu_1 = require("./Menu");
function getSettings(defaultSettings, customSettings = {}) {
    return Object.assign(Object.assign({ type: 'general' }, defaultSettings), customSettings);
}
function getMenuItems(items, defaultSettings) {
    const menuItems = {};
    let i = 0;
    for (const { component, settings } of items) {
        menuItems[`global-${i++}`] = {
            pilet: undefined,
            component,
            settings: getSettings(defaultSettings, settings),
        };
    }
    return menuItems;
}
function withMenu(menuItems) {
    return (state) => (Object.assign(Object.assign({}, state), { components: Object.assign({ MenuContainer: default_1.DefaultContainer, MenuItem: default_1.DefaultItem }, state.components), registry: Object.assign(Object.assign({}, state.registry), { menuItems }) }));
}
/**
 * Creates new Pilet API extensions for integration of menu items.
 */
function createMenuApi(config = {}) {
    const { items = [], defaultSettings = {} } = config;
    return (context) => {
        context.defineActions(actions);
        context.dispatch((0, piral_core_1.withAll)(withMenu(getMenuItems(items, defaultSettings)), (0, piral_core_1.withRootExtension)('piral-menu', Menu_1.Menu)));
        return (api, target) => {
            const pilet = target.name;
            let next = 0;
            return {
                registerMenu(name, arg, settings) {
                    if (typeof name !== 'string') {
                        settings = arg;
                        arg = name;
                        name = next++;
                    }
                    const id = (0, piral_core_1.buildName)(pilet, name);
                    context.registerMenuItem(id, {
                        pilet,
                        component: (0, piral_core_1.withApi)(context, arg, api, 'menu'),
                        settings: getSettings(defaultSettings, settings),
                    });
                    return () => api.unregisterMenu(name);
                },
                unregisterMenu(name) {
                    const id = (0, piral_core_1.buildName)(pilet, name);
                    context.unregisterMenuItem(id);
                },
            };
        };
    };
}
exports.createMenuApi = createMenuApi;
//# sourceMappingURL=create.js.map