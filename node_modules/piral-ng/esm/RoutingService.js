var RoutingService_1;
import { __decorate, __metadata, __param } from "tslib";
import * as ngCore from '@angular/core';
import { Inject, Injectable, NgZone, Optional } from '@angular/core';
import { NavigationError, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
const ngc = ngCore;
let RoutingService = RoutingService_1 = class RoutingService {
    constructor(context, router, zone) {
        this.context = context;
        this.router = router;
        this.zone = zone;
        this.invalidRoutes = [];
        if (this.router) {
            this.router.errorHandler = (error) => {
                if (error.message.match('Cannot match any routes')) {
                    // ignore this special error
                    return undefined;
                }
                throw error;
            };
            this.dispose = this.context.router.history.listen((e) => {
                const path = e.pathname;
                if (!this.invalidRoutes.includes(path)) {
                    this.zone.run(() => this.router.navigateByUrl(path));
                }
            });
            this.subscription = this.router.events.pipe(filter((e) => e instanceof NavigationError)).subscribe((e) => {
                const path = e.url;
                if (!this.invalidRoutes.includes(path)) {
                    this.invalidRoutes.push(path);
                }
                this.context.router.history.push(path);
            });
        }
    }
    ngOnDestroy() {
        var _a, _b;
        (_a = this.dispose) === null || _a === void 0 ? void 0 : _a.call(this);
        (_b = this.subscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
    }
};
RoutingService.ɵfac = 'ɵɵinject' in ngc
    ? (t) => new (t || RoutingService_1)(ngc.ɵɵinject('Context'), ngc.ɵɵinject(Router, 8), ngc.ɵɵinject(NgZone, 8))
    : undefined;
RoutingService.ɵprov = 'ɵɵngDeclareInjectable' in ngc
    ? ngc.ɵɵdefineInjectable({ token: RoutingService_1, factory: RoutingService_1.ɵfac })
    : undefined;
RoutingService = RoutingService_1 = __decorate([
    Injectable(),
    __param(0, Inject('Context')),
    __param(1, Optional()),
    __param(2, Optional()),
    __metadata("design:paramtypes", [Object, Router,
        NgZone])
], RoutingService);
export { RoutingService };
if ('ɵsetClassMetadata' in ngc) {
    ngc.ɵsetClassMetadata(RoutingService, [
        {
            type: Injectable,
            args: [{ name: 'resourceUrl' }],
        },
    ], () => [
        {
            type: undefined,
            decorators: [
                {
                    type: Inject,
                    args: ['Context'],
                },
            ],
        },
        {
            type: Router,
            decorators: [
                {
                    type: Optional,
                },
            ],
        },
        {
            type: NgZone,
            decorators: [
                {
                    type: Optional,
                },
            ],
        },
    ]);
}
//# sourceMappingURL=RoutingService.js.map