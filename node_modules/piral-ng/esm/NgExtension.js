var NgExtension_1;
import { __decorate, __metadata, __param } from "tslib";
import * as ngCore from '@angular/core';
import { Component, ElementRef, Input, Inject } from '@angular/core';
const ngc = ngCore;
const selector = 'extension-component';
let NgExtension = NgExtension_1 = class NgExtension {
    constructor(elRef, piral) {
        this.elRef = elRef;
        this.piral = piral;
    }
    ngOnChanges() {
        this.elRef.nativeElement.dispatchEvent(new CustomEvent('extension-props-changed', {
            detail: {
                name: this.name,
                params: this.params,
            },
        }));
    }
    ngAfterContentInit() {
        this.piral.renderHtmlExtension(this.elRef.nativeElement, {
            name: this.name,
            params: this.params,
        });
    }
};
// @ts-ignore
NgExtension.ɵfac = 'ɵɵdirectiveInject' in ngc
    ? (t) => new (t || NgExtension_1)(ngc.ɵɵdirectiveInject(ElementRef), ngc.ɵɵdirectiveInject('piral'))
    : undefined;
// @ts-ignore
NgExtension.ɵcmp = 'ɵɵdefineComponent' in ngc
    ? ngc.ɵɵdefineComponent({
        type: NgExtension_1,
        selectors: [selector],
        inputs: { name: 'name', params: 'params' },
        decls: 0,
        vars: 0,
        template: () => { },
        encapsulation: 2,
    })
    : undefined;
__decorate([
    Input('name'),
    __metadata("design:type", String)
], NgExtension.prototype, "name", void 0);
__decorate([
    Input('params'),
    __metadata("design:type", Object)
], NgExtension.prototype, "params", void 0);
NgExtension = NgExtension_1 = __decorate([
    Component({
        selector,
        template: '',
    }),
    __param(1, Inject('piral')),
    __metadata("design:paramtypes", [ElementRef, Object])
], NgExtension);
export { NgExtension };
if ('ɵsetClassMetadata' in ngc) {
    ngc.ɵsetClassMetadata(NgExtension, [
        {
            type: Component,
            args: [{ selector, template: '' }],
        },
    ]);
}
//# sourceMappingURL=NgExtension.js.map