import { BehaviorSubject } from 'rxjs';
import { NgExtension } from './NgExtension';
import { enqueue } from './queue';
import { defineModule } from './module';
import { bootstrap, prepareBootstrap } from './bootstrap';
export function createConverter(_ = {}) {
    const registry = new Map();
    const convert = (component) => ({
        mount(el, props, ctx, locals) {
            locals.active = true;
            if (!registry.has(component)) {
                registry.set(component, prepareBootstrap(component, props.piral));
            }
            if (!locals.props) {
                locals.props = new BehaviorSubject(props);
            }
            if (!locals.queued) {
                locals.queued = Promise.resolve();
            }
            locals.queued = locals.queued.then(() => enqueue(() => locals.active && bootstrap(registry.get(component), el, locals.props, ctx)));
        },
        update(el, props, ctx, locals) {
            locals.props.next(props);
        },
        unmount(el, locals) {
            locals.active = false;
            locals.queued = locals.queued.then((dispose) => dispose && dispose());
        },
    });
    convert.defineModule = defineModule;
    convert.Extension = NgExtension;
    return convert;
}
//# sourceMappingURL=converter.js.map