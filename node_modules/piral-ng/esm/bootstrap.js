import { __awaiter } from "tslib";
import { startup } from './startup';
import { getAnnotations } from './utils';
import { createModuleInstance, getModuleInstance, defineModule } from './module';
export function prepareBootstrap(moduleOrComponent, piral) {
    const [annotation] = getAnnotations(moduleOrComponent);
    // first way is to directly use a module, which is the legacy way
    // second way is to find a previously defined Angular module
    if (annotation && annotation.bootstrap) {
        // usually contains things like imports, exports, declarations, ...
        const [component] = annotation.bootstrap;
        annotation.exports = [component];
        defineModule(moduleOrComponent);
        return [...getModuleInstance(component, piral), component];
    }
    else {
        // usually contains things like selector, template or templateUrl, changeDetection, ...
        const result = getModuleInstance(moduleOrComponent, piral) || createModuleInstance(moduleOrComponent, piral);
        return [...result, moduleOrComponent];
    }
}
export function bootstrap(result, node, props, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const [selectedModule, ngOptions, component] = result;
        const ref = yield startup(selectedModule, context, ngOptions);
        if (ref) {
            ref.instance.attach(component, node, props);
            return () => ref.instance.detach(component, node);
        }
        return () => { };
    });
}
//# sourceMappingURL=bootstrap.js.map