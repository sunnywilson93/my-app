import { __decorate, __metadata } from "tslib";
import * as ngCore from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';
import { ComponentFactoryResolver, CUSTOM_ELEMENTS_SCHEMA, NgModule, NgZone, } from '@angular/core';
import { RoutingService } from './RoutingService';
import { SharedModule } from './SharedModule';
import { findComponents, getAnnotations } from './utils';
const ngc = ngCore;
const availableModules = [];
function instantiateModule(moduleDef, piral) {
    var BootstrapModule_1;
    const { module, components } = moduleDef;
    const imports = [BrowserModule, SharedModule, module];
    const props = { current: undefined };
    const providers = [
        RoutingService,
        { provide: 'Props', useFactory: () => props.current.value, deps: [] },
        { provide: 'piral', useFactory: () => piral, deps: [] },
    ];
    let BootstrapModule = BootstrapModule_1 = class BootstrapModule {
        constructor(resolver, zone, routing) {
            this.resolver = resolver;
            this.zone = zone;
            this.routing = routing;
            this.refs = [];
        }
        ngDoBootstrap(appRef) {
            this.appRef = appRef;
        }
        attach(component, node, $props) {
            var _a, _b, _c;
            const factory = this.resolver.resolveComponentFactory(component);
            props.current = $props;
            if (factory) {
                const ref = this.zone.run(() => this.appRef.bootstrap(factory, node));
                const name = (_c = (_b = (_a = ref.componentType) === null || _a === void 0 ? void 0 : _a.ɵcmp) === null || _b === void 0 ? void 0 : _b.inputs) === null || _c === void 0 ? void 0 : _c.Props;
                if (typeof name === 'string') {
                    const sub = $props.subscribe((props) => {
                        var _a;
                        ref.instance[name] = props;
                        (_a = ref.changeDetectorRef) === null || _a === void 0 ? void 0 : _a.detectChanges();
                    });
                    ref.onDestroy(() => sub.unsubscribe());
                }
                this.refs.push([component, node, ref]);
            }
        }
        detach(component, node) {
            for (let i = this.refs.length; i--;) {
                const [sourceComponent, sourceNode, ref] = this.refs[i];
                if (sourceComponent === component && sourceNode === node) {
                    ref.destroy();
                    this.refs.splice(i, 1);
                }
            }
        }
    };
    BootstrapModule.ɵfac = 'ɵɵinject' in ngc
        ? (t) => new (t || BootstrapModule_1)(ngc.ɵɵinject(ComponentFactoryResolver), ngc.ɵɵinject(NgZone), ngc.ɵɵinject(RoutingService))
        : undefined;
    BootstrapModule.ɵmod = 'ɵɵdefineNgModule' in ngc
        ? ngc.ɵɵdefineNgModule({
            type: BootstrapModule_1,
        })
        : undefined;
    BootstrapModule.ɵinj = 'ɵɵdefineInjector' in ngc
        ? ngc.ɵɵdefineInjector({
            providers,
            imports: [imports],
        })
        : undefined;
    BootstrapModule = BootstrapModule_1 = __decorate([
        NgModule({
            imports,
            entryComponents: components,
            providers,
        }),
        __metadata("design:paramtypes", [ComponentFactoryResolver, NgZone, RoutingService])
    ], BootstrapModule);
    if ('ɵsetClassMetadata' in ngc) {
        ngc.ɵsetClassMetadata(BootstrapModule, [
            {
                type: NgModule,
                args: [
                    {
                        entryComponents: components,
                        providers,
                        imports,
                    },
                ],
            },
        ], () => [{ type: ComponentFactoryResolver }, { type: NgZone }, { type: RoutingService }]);
    }
    return BootstrapModule;
}
export function getModuleInstance(component, piral) {
    const [moduleDef] = availableModules.filter((m) => m.components.includes(component));
    if (moduleDef) {
        if (!moduleDef.active) {
            moduleDef.active = instantiateModule(moduleDef, piral);
        }
        return [moduleDef.active, moduleDef.opts];
    }
    if (process.env.NODE_ENV === 'development') {
        console.warn('Component not found in all defined Angular modules. Make sure to define (using `defineNgModule`) a module with your component(s) referenced in the exports section of the `@NgModule` decorator.', component, piral.meta);
    }
    return undefined;
}
export function createModuleInstance(component, piral) {
    var Module_1;
    const declarations = [component];
    const importsDef = [CommonModule];
    const exportsDef = [component];
    const schemasDef = [CUSTOM_ELEMENTS_SCHEMA];
    let Module = Module_1 = class Module {
    };
    Module.ɵfac = 'ɵɵinject' in ngc ? (t) => new (t || Module_1)() : undefined;
    Module.ɵmod = 'ɵɵdefineNgModule' in ngc
        ? ngc.ɵɵdefineNgModule({
            type: Module_1,
        })
        : undefined;
    Module.ɵinj = 'ɵɵdefineInjector' in ngc
        ? ngc.ɵɵdefineInjector({
            imports: [importsDef],
        })
        : undefined;
    Module = Module_1 = __decorate([
        NgModule({
            declarations,
            imports: importsDef,
            exports: exportsDef,
            schemas: schemasDef,
        })
    ], Module);
    if ('ɵsetClassMetadata' in ngc) {
        ngc.ɵsetClassMetadata(Module, [
            {
                type: NgModule,
                args: [
                    {
                        declarations,
                        imports: importsDef,
                        exports: exportsDef,
                        schemas: schemasDef,
                    },
                ],
            },
        ]);
    }
    defineModule(Module);
    return getModuleInstance(component, piral);
}
export function defineModule(module, opts = undefined) {
    const [annotation] = getAnnotations(module);
    availableModules.push({
        active: undefined,
        components: findComponents(annotation.exports),
        module,
        opts,
    });
}
//# sourceMappingURL=module.js.map