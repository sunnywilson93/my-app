import { createConverter } from './esm/converter';
export interface HtmlComponent<TProps> {
    component: {
        mount(element: HTMLElement, props: TProps, ctx: any, locals: any): void;
        update?(element: HTMLElement, props: TProps, ctx: any, locals: any): void;
        unmount?(element: HTMLElement, locals: any): void;
    };
    type: 'html';
}
export interface NgConverter {
    (...params: Parameters<ReturnType<typeof createConverter>>): HtmlComponent<any>;
}
export declare function createNgConverter(...params: Parameters<typeof createConverter>): {
    from: NgConverter;
    Extension: any;
    defineModule: import("./esm/types").NgModuleDefiner;
};
declare const fromNg: NgConverter, NgExtension: any, defineNgModule: import("./esm/types").NgModuleDefiner;
export { fromNg, NgExtension, defineNgModule };
