"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unpackGzTar = exports.unpackTarball = exports.createTarball = void 0;
const path_1 = require("path");
const zlib_1 = require("zlib");
const log_1 = require("./log");
const external_1 = require("../external");
function createTarball(sourceDir, targetDir, targetFile) {
    const folder = (0, path_1.relative)(targetDir, sourceDir);
    (0, log_1.log)('generalDebug_0003', `Create archive "${targetFile}" in "${targetDir}" containing "${folder}".`);
    return external_1.tar.create({
        file: (0, path_1.resolve)(targetDir, targetFile),
        cwd: targetDir,
    }, [folder]);
}
exports.createTarball = createTarball;
function unpackTarball(sourceDir, sourceFile) {
    (0, log_1.log)('generalDebug_0003', `Extract files from "${sourceFile}" in "${sourceDir}".`);
    return external_1.tar.extract({
        file: (0, path_1.resolve)(sourceDir, sourceFile),
        keep: false,
        cwd: sourceDir,
    });
}
exports.unpackTarball = unpackTarball;
function unpackGzTar(stream) {
    const TarParser = external_1.tar.Parse;
    return new Promise((resolve, reject) => {
        const files = {};
        (0, log_1.log)('generalDebug_0003', `Unpacking the stream ...`);
        stream
            .on('error', reject)
            .pipe((0, zlib_1.createGunzip)())
            .on('error', reject)
            .pipe(new TarParser())
            .on('error', reject)
            .on('entry', (e) => {
            const content = [];
            const p = e.path;
            (0, log_1.log)('generalDebug_0003', `Found entry "${p}" in packed content.`);
            e.on('error', reject);
            e.on('data', (c) => content.push(c));
            e.on('end', () => (files[p] = Buffer.concat(content)));
        })
            .on('end', () => resolve(files));
    });
}
exports.unpackGzTar = unpackGzTar;
//# sourceMappingURL=archive.js.map