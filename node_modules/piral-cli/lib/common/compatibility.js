"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkCliCompatibility = exports.checkAppShellCompatibility = void 0;
const info_1 = require("./info");
const package_1 = require("./package");
const log_1 = require("./log");
function checkAppShellCompatibility(piralVersion) {
    (0, log_1.log)('generalDebug_0003', `Checking compatibility ...`);
    if (!piralVersion) {
        (0, log_1.log)('appShellMaybeIncompatible_0102', info_1.cliVersion);
        return false;
    }
    const compatible = (0, info_1.findCompatVersion)(piralVersion);
    (0, log_1.log)('generalDebug_0003', `Used versions: "${compatible}" and "${info_1.compatVersion}".`);
    if (info_1.compatVersion !== compatible) {
        (0, log_1.log)('appShellIncompatible_0100', piralVersion, info_1.cliVersion);
        return false;
    }
    return true;
}
exports.checkAppShellCompatibility = checkAppShellCompatibility;
function checkCliCompatibility(root) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, log_1.log)('generalDebug_0003', `Checking compatibility ...`);
        const piralVersion = yield (0, package_1.findPackageVersion)(root, 'piral-base');
        const compatible = (0, info_1.findCompatVersion)(piralVersion);
        (0, log_1.log)('generalDebug_0003', `Used versions: "${compatible}" and "${info_1.compatVersion}".`);
        if (info_1.compatVersion !== compatible) {
            (0, log_1.log)('toolingIncompatible_0101', piralVersion, info_1.cliVersion);
            return false;
        }
        return true;
    });
}
exports.checkCliCompatibility = checkCliCompatibility;
//# sourceMappingURL=compatibility.js.map