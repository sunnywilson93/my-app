"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.concurrentWorkers = void 0;
function concurrentWorkers(items, concurrency, worker) {
    return __awaiter(this, void 0, void 0, function* () {
        const maxItems = items.length;
        const results = new Array(maxItems);
        let offset = 0;
        yield Promise.all(items.slice(0, concurrency).map(() => __awaiter(this, void 0, void 0, function* () {
            while (offset < maxItems) {
                const i = offset++;
                const item = items[i];
                results[i] = yield worker(item);
            }
        })));
        return results;
    });
}
exports.concurrentWorkers = concurrentWorkers;
//# sourceMappingURL=parallel.js.map