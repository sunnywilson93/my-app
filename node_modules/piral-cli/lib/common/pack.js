"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPiletPackage = void 0;
const path_1 = require("path");
const log_1 = require("./log");
const io_1 = require("./io");
const npm_1 = require("./npm");
const enums_1 = require("./enums");
function getFile(root, name, dest) {
    return __awaiter(this, void 0, void 0, function* () {
        const proposed = (0, path_1.join)(root, name);
        if (dest !== root) {
            (0, log_1.log)('generalDebug_0003', `Moving file from "${root}" to "${dest}" ...`);
            const file = yield (0, io_1.move)(proposed, dest, enums_1.ForceOverwrite.yes);
            (0, log_1.log)('generalDebug_0003', 'Successfully moved file.');
            return file;
        }
        return proposed;
    });
}
function createPiletPackage(baseDir, source, target) {
    return __awaiter(this, void 0, void 0, function* () {
        const root = (0, path_1.resolve)(baseDir, source);
        const dest = (0, path_1.resolve)(baseDir, target);
        (0, log_1.log)('generalDebug_0003', `Reading the package at "${root}" ...`);
        const pckg = yield (0, io_1.readJson)(root, 'package.json');
        (0, log_1.log)('generalDebug_0003', 'Successfully read package.');
        if (!pckg) {
            (0, log_1.fail)('packageJsonNotFound_0020');
        }
        if (!pckg.name) {
            (0, log_1.fail)('packageJsonMissingName_0021');
        }
        if (!pckg.version) {
            (0, log_1.fail)('packageJsonMissingVersion_0022');
        }
        (0, log_1.progress)(`Packing pilet in ${dest} ...`);
        (0, log_1.log)('generalDebug_0003', 'Creating package ...');
        yield (0, npm_1.createNpmPackage)(root);
        (0, log_1.log)('generalDebug_0003', 'Successfully created package.');
        const name = `${pckg.name}-${pckg.version}.tgz`.replace(/@/g, '').replace(/\//g, '-');
        (0, log_1.log)('generalDebug_0003', `Assumed package name "${name}".`);
        const file = yield getFile(root, name, dest);
        (0, log_1.log)('generalDebug_0003', `Packed file "${file}".`);
        return file;
    });
}
exports.createPiletPackage = createPiletPackage;
//# sourceMappingURL=pack.js.map