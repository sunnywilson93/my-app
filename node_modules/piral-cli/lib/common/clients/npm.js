"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listPackage = exports.findTarball = exports.findSpecificVersion = exports.publishPackage = exports.createPackage = exports.unpackPackage = exports.initProject = exports.isProject = exports.detectClient = exports.installPackage = exports.installDependencies = void 0;
const path_1 = require("path");
const log_1 = require("../log");
const io_1 = require("../io");
const scripts_1 = require("../scripts");
const MemoryStream_1 = require("../MemoryStream");
// Helpers:
function runNpmProcess(args, target, output) {
    (0, log_1.log)('generalDebug_0003', 'Starting the npm process ...');
    const cwd = (0, path_1.resolve)(process.cwd(), target);
    return (0, scripts_1.runCommand)('npm', args, cwd, output);
}
// Client interface functions:
function installDependencies(target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runNpmProcess(['install', '--legacy-peer-deps', ...flags], target, ms);
        (0, log_1.log)('generalDebug_0003', `npm install dependencies result: ${ms.value}`);
        return ms.value;
    });
}
exports.installDependencies = installDependencies;
function installPackage(packageRef, target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runNpmProcess(['install', packageRef, '--legacy-peer-deps', ...flags], target, ms);
        (0, log_1.log)('generalDebug_0003', `npm install package result: ${ms.value}`);
        return ms.value;
    });
}
exports.installPackage = installPackage;
function detectClient(root) {
    return __awaiter(this, void 0, void 0, function* () {
        return !!(yield (0, io_1.findFile)(root, 'package-lock.json'));
    });
}
exports.detectClient = detectClient;
function isProject(root, packageRef) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const details = yield listPackage(packageRef, root);
        const packageDetails = (_a = details === null || details === void 0 ? void 0 : details.dependencies) === null || _a === void 0 ? void 0 : _a[packageRef];
        if (packageDetails && typeof packageDetails.resolved === 'string') {
            return packageDetails.resolved.startsWith('file:');
        }
        return false;
    });
}
exports.isProject = isProject;
function initProject(projectName, target) {
    return __awaiter(this, void 0, void 0, function* () { });
}
exports.initProject = initProject;
// Functions to exclusively use from npm client:
function unpackPackage(packageRef, target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runNpmProcess(['pack', packageRef, ...flags], target, ms);
        (0, log_1.log)('generalDebug_0003', `npm (un)pack result: ${ms.value}`);
        return ms.value;
    });
}
exports.unpackPackage = unpackPackage;
function createPackage(target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runNpmProcess(['pack', ...flags], target, ms);
        (0, log_1.log)('generalDebug_0003', `npm pack result: ${ms.value}`);
        return ms.value;
    });
}
exports.createPackage = createPackage;
function publishPackage(target = '.', file = '*.tgz', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runNpmProcess(['publish', file, ...flags], target, ms);
        (0, log_1.log)('generalDebug_0003', `npm publish result: ${ms.value}`);
        return ms.value;
    });
}
exports.publishPackage = publishPackage;
function findSpecificVersion(packageName, version) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runNpmProcess(['show', packageName, 'version', '--tag', version], '.', ms);
        (0, log_1.log)('generalDebug_0003', `npm show result: ${ms.value}`);
        return ms.value;
    });
}
exports.findSpecificVersion = findSpecificVersion;
function findTarball(packageRef, target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runNpmProcess(['view', packageRef, 'dist.tarball', ...flags], target, ms);
        (0, log_1.log)('generalDebug_0003', `npm view packageRef result: ${ms.value}`);
        return ms.value;
    });
}
exports.findTarball = findTarball;
function listPackage(packageRef, target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        try {
            yield runNpmProcess(['ls', packageRef, '--json', '--depth', '0', ...flags], target, ms);
        }
        catch (e) {
            (0, log_1.log)('generalDebug_0003', `npm ls packageRef error: ${e}`);
            return {};
        }
        (0, log_1.log)('generalDebug_0003', `npm ls packageRef result: ${ms.value}`);
        return JSON.parse(ms.value);
    });
}
exports.listPackage = listPackage;
//# sourceMappingURL=npm.js.map