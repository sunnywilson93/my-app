"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listProjects = exports.isProject = exports.initProject = exports.detectClient = exports.installPackage = exports.installDependencies = void 0;
const path_1 = require("path");
const log_1 = require("../log");
const io_1 = require("../io");
const scripts_1 = require("../scripts");
const MemoryStream_1 = require("../MemoryStream");
// Helpers:
function runYarnProcess(args, target, output) {
    (0, log_1.log)('generalDebug_0003', 'Starting the Yarn@1 process ...');
    const cwd = (0, path_1.resolve)(process.cwd(), target);
    return (0, scripts_1.runCommand)('yarn', args, cwd, output);
}
function convert(flags) {
    return flags.map((flag) => {
        switch (flag) {
            case '--save-exact':
                return '--exact';
            case '--save-dev':
                return '--dev';
            case '--no-save':
                // unfortunately no (https://github.com/yarnpkg/yarn/issues/1743)
                return '';
            default:
                return flag;
        }
    });
}
// Client interface functions:
function installDependencies(target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runYarnProcess(['install', ...convert(flags)], target, ms);
        (0, log_1.log)('generalDebug_0003', `Yarn@1 install dependencies result: ${ms.value}`);
        return ms.value;
    });
}
exports.installDependencies = installDependencies;
function installPackage(packageRef, target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runYarnProcess(['add', packageRef, ...convert(flags)], target, ms);
        (0, log_1.log)('generalDebug_0003', `Yarn@1 install package result: ${ms.value}`);
        return ms.value;
    });
}
exports.installPackage = installPackage;
function detectClient(root) {
    return __awaiter(this, void 0, void 0, function* () {
        return !!(yield (0, io_1.findFile)(root, 'yarn.lock'));
    });
}
exports.detectClient = detectClient;
function initProject(projectName, target) {
    return __awaiter(this, void 0, void 0, function* () { });
}
exports.initProject = initProject;
function isProject(root, packageRef) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const details = yield listProjects(root);
        if (typeof details === 'object') {
            return typeof ((_a = details === null || details === void 0 ? void 0 : details[packageRef]) === null || _a === void 0 ? void 0 : _a.location) === 'string';
        }
        return false;
    });
}
exports.isProject = isProject;
// Functions to exclusively use from yarn client:
function listProjects(target) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        try {
            yield runYarnProcess(['workspaces', 'info'], target, ms);
        }
        catch (e) {
            (0, log_1.log)('generalDebug_0003', `yarn workspaces error: ${e}`);
            return {};
        }
        (0, log_1.log)('generalDebug_0003', `yarn workspaces result: ${ms.value}`);
        return JSON.parse(ms.value);
    });
}
exports.listProjects = listProjects;
//# sourceMappingURL=yarn.js.map