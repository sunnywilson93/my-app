"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
/**
 * Checks if the used Piral instance is not referenced in the code.
 */
function default_1(context, options = 'ignore') {
    return __awaiter(this, void 0, void 0, function* () {
        if (options !== 'ignore') {
            const { name } = context.data.appPackage;
            const names = ['piral', 'piral-core', 'piral-base', name];
            const files = yield (0, common_1.getSourceFiles)(context.entry);
            const testers = [];
            for (const packageName of names) {
                testers.push(new RegExp(`(import\\s+.*\\s+from\\s+["'\`]${packageName}["'\`]|require\\(["'\`]${packageName}["'\`]\\));`));
            }
            for (const file of files) {
                const fileContent = yield file.read();
                for (const tester of testers) {
                    if (tester.test(fileContent)) {
                        context.error(`
The Piral instance is referenced in "${file.path}".
  Expected: No import of "${name}" or Piral itself.
  Received: Import seen.
`);
                        break;
                    }
                }
            }
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=pilet-has-no-self-reference.js.map