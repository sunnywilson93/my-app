"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
function printError(context, label, missing) {
    if (missing.length > 0) {
        const missingNames = missing.map((m) => m.name);
        context.error(`
The ${label} miss some of the shared dependencies.
Expected: <none>.
Received: Missing "${missingNames.join('", "')}".
`);
    }
}
/**
 * Checks that "externals" dependencies have been specified in "peerDependencies".
 */
function default_1(context, options = 'ignore') {
    return __awaiter(this, void 0, void 0, function* () {
        if (options !== 'ignore') {
            const { externals } = (0, common_1.getPiletsInfo)(context.data.appPackage);
            const markedPeerDependencies = Object.keys(context.peerDependencies);
            const markedPeerModules = context.peerModules;
            const missingExternals = externals
                .map((name) => {
                const valid = (0, common_1.isValidDependency)(name);
                const missing = !(valid ? markedPeerDependencies : markedPeerModules).includes(name);
                return { name, valid, missing };
            })
                .filter((m) => m.missing);
            if (options === 'only-used' && missingExternals.length > 0) {
                const testers = missingExternals
                    .map((ext) => ext.name)
                    .map((ext) => ({
                    run: new RegExp(`(import\\s+(.*\\s+from\\s+)?["'\`]${ext}["'\`]|require\\(["'\`]${ext}["'\`]\\));`),
                    count: 0,
                }));
                const files = yield (0, common_1.getSourceFiles)(context.entry);
                for (const file of files) {
                    const fileContent = yield file.read();
                    for (const tester of testers) {
                        if (tester.run.test(fileContent)) {
                            tester.count++;
                        }
                    }
                }
                for (let i = missingExternals.length; i--;) {
                    if (testers[i].count === 0) {
                        missingExternals.splice(i, 1);
                    }
                }
            }
            printError(context, 'peerDependencies', missingExternals.filter((m) => m.valid));
            printError(context, 'peerModules', missingExternals.filter((m) => !m.valid));
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=pilet-has-externals-as-peers.js.map