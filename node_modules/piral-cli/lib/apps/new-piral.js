"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newPiral = exports.newPiralDefaults = void 0;
const path_1 = require("path");
const types_1 = require("../types");
const common_1 = require("../common");
exports.newPiralDefaults = {
    app: './src/index.html',
    registry: common_1.config.registry,
    framework: 'piral',
    target: '.',
    version: common_1.cliVersion,
    forceOverwrite: common_1.ForceOverwrite.no,
    language: common_1.config.language,
    install: true,
    template: 'default',
    logLevel: types_1.LogLevels.info,
    npmClient: common_1.config.npmClient,
    bundlerName: 'none',
    variables: {},
};
function newPiral(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { app = exports.newPiralDefaults.app, registry = exports.newPiralDefaults.registry, framework = exports.newPiralDefaults.framework, target = exports.newPiralDefaults.target, version = exports.newPiralDefaults.version, forceOverwrite = exports.newPiralDefaults.forceOverwrite, language = exports.newPiralDefaults.language, install = exports.newPiralDefaults.install, template = exports.newPiralDefaults.template, logLevel = exports.newPiralDefaults.logLevel, bundlerName = exports.newPiralDefaults.bundlerName, variables = exports.newPiralDefaults.variables, } = options;
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        const root = (0, path_1.resolve)(fullBase, target);
        (0, common_1.setLogLevel)(logLevel);
        (0, common_1.progress)('Preparing source and target ...');
        const success = yield (0, common_1.createDirectory)(root);
        if (success) {
            const npmClient = yield (0, common_1.determineNpmClient)(root, options.npmClient);
            const packageRef = (0, common_1.combinePackageRef)(framework, version, 'registry');
            const projectName = (0, path_1.basename)(root);
            (0, common_1.progress)(`Creating a new Piral instance in %s ...`, root);
            yield (0, common_1.createFileIfNotExists)(root, 'package.json', JSON.stringify({
                name: projectName,
                version: '1.0.0',
                description: '',
                keywords: ['piral'],
                dependencies: {},
                scripts: {},
            }, undefined, 2));
            yield (0, common_1.initNpmProject)(npmClient, projectName, root);
            if (registry !== exports.newPiralDefaults.registry) {
                (0, common_1.progress)(`Setting up npm registry (%s) ...`, registry);
                yield (0, common_1.createFileIfNotExists)(root, '.npmrc', `registry=${registry}
always-auth=true`, forceOverwrite);
            }
            (0, common_1.progress)(`Installing npm package ${packageRef} ...`);
            yield (0, common_1.installNpmPackage)(npmClient, packageRef, root, '--save-exact');
            (0, common_1.progress)(`Taking care of templating ...`);
            yield (0, common_1.updateExistingJson)(root, 'package.json', (0, common_1.getPiralPackage)(app, language, version, framework, bundlerName));
            yield (0, common_1.scaffoldPiralSourceFiles)(template, registry, (0, common_1.getPiralScaffoldData)(language, root, app, framework, variables), forceOverwrite);
            if (install) {
                (0, common_1.progress)(`Installing dependencies ...`);
                yield (0, common_1.installNpmDependencies)(npmClient, root);
            }
            (0, common_1.logDone)(`Piral instance scaffolded successfully!`);
        }
        else {
            (0, common_1.fail)('cannotCreateDirectory_0044');
        }
    });
}
exports.newPiral = newPiral;
//# sourceMappingURL=new-piral.js.map