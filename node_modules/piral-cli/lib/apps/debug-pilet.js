"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugPilet = exports.debugPiletDefaults = void 0;
const path_1 = require("path");
const kras_1 = require("kras");
const bundler_1 = require("../bundler");
const types_1 = require("../types");
const common_1 = require("../common");
exports.debugPiletDefaults = {
    logLevel: types_1.LogLevels.info,
    target: './dist/index.js',
    entry: './src/index',
    open: common_1.config.openBrowser,
    port: common_1.config.port,
    publicUrl: '/',
    hmr: true,
    optimizeModules: false,
    schemaVersion: common_1.config.schemaVersion,
    concurrency: common_1.cpuCount,
};
const injectorName = (0, path_1.resolve)(__dirname, '../injectors/pilet.js');
function getOrMakeAppDir({ emulator, piral, appFile, publicUrl }, logLevel) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!emulator) {
            const { externals, root, ignored } = yield (0, common_1.retrievePiletsInfo)(appFile);
            const { dir } = yield (0, bundler_1.callDebugPiralFromMonoRepo)({
                root,
                optimizeModules: false,
                ignored,
                externals,
                piral,
                entryFiles: appFile,
                logLevel,
                _: {},
            });
            return dir;
        }
        return (0, path_1.dirname)(appFile);
    });
}
function checkSanity(pilets) {
    for (let i = 1; i < pilets.length; i++) {
        const previous = pilets[i - 1];
        const current = pilets[i];
        if (previous.piral !== current.piral) {
            return (0, common_1.log)('piletMultiDebugAppShellDifferent_0301', previous.piral, current.piral);
        }
        else if (previous.appVersion !== current.appVersion) {
            return (0, common_1.log)('piletMultiDebugAppShellVersions_0302', previous.appVersion, current.appVersion);
        }
        else if (previous.externals.length !== current.externals.length) {
            return (0, common_1.log)('piletMultiDebugExternalsDifferent_0303', previous.externals, current.externals);
        }
        else if (previous.externals.some((m) => !current.externals.includes(m))) {
            return (0, common_1.log)('piletMultiDebugExternalsDifferent_0303', previous.externals, current.externals);
        }
    }
}
function debugPilet(baseDir = process.cwd(), options = {}) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.debugPiletDefaults.entry, target = exports.debugPiletDefaults.target, port = exports.debugPiletDefaults.port, open = exports.debugPiletDefaults.open, hmr = exports.debugPiletDefaults.hmr, publicUrl: originalPublicUrl = exports.debugPiletDefaults.publicUrl, logLevel = exports.debugPiletDefaults.logLevel, concurrency = exports.debugPiletDefaults.concurrency, optimizeModules = exports.debugPiletDefaults.optimizeModules, schemaVersion = exports.debugPiletDefaults.schemaVersion, _ = {}, hooks = {}, bundlerName, app, appInstanceDir, feed, } = options;
        const publicUrl = (0, common_1.normalizePublicUrl)(originalPublicUrl);
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        (0, common_1.setLogLevel)(logLevel);
        yield ((_a = hooks.onBegin) === null || _a === void 0 ? void 0 : _a.call(hooks, { options, fullBase }));
        (0, common_1.progress)('Reading configuration ...');
        const krasConfig = (0, kras_1.readKrasConfig)({ port }, kras_1.krasrc);
        const api = `${publicUrl}${common_1.config.piletApi.replace(/^\/+/, '')}`;
        const entryList = Array.isArray(entry) ? entry : [entry];
        const multi = entryList.length > 1 || entryList[0].indexOf('*') !== -1;
        (0, common_1.log)('generalDebug_0003', `Looking for (${multi ? 'multi' : 'single'}) "${entryList.join('", "')}" in "${fullBase}".`);
        const allEntries = yield (0, common_1.matchAnyPilet)(fullBase, entryList);
        const maxListeners = Math.max(2 + allEntries.length * 2, 16);
        (0, common_1.log)('generalDebug_0003', `Found the following entries: ${allEntries.join(', ')}`);
        if (krasConfig.sources === undefined) {
            krasConfig.sources = [];
        }
        if (allEntries.length === 0) {
            (0, common_1.fail)('entryFileMissing_0077');
        }
        process.stderr.setMaxListeners(maxListeners);
        process.stdout.setMaxListeners(maxListeners);
        process.stdin.setMaxListeners(maxListeners);
        const pilets = yield (0, common_1.concurrentWorkers)(allEntries, concurrency, (entryModule) => __awaiter(this, void 0, void 0, function* () {
            var _h;
            const targetDir = (0, path_1.dirname)(entryModule);
            const { peerDependencies, peerModules, root, appPackage, appFile, ignored, emulator, importmap } = yield (0, common_1.retrievePiletData)(targetDir, app);
            const externals = [...Object.keys(peerDependencies), ...peerModules];
            const mocks = (0, path_1.join)(targetDir, 'mocks');
            const dest = (0, path_1.resolve)(root, target);
            const outDir = (0, path_1.dirname)(dest);
            const outFile = (0, path_1.basename)(dest);
            const exists = yield (0, common_1.checkExistingDirectory)(mocks);
            if (exists) {
                if (krasConfig.directory === undefined) {
                    krasConfig.directory = mocks;
                }
                krasConfig.sources.push(mocks);
            }
            yield ((_h = hooks.beforeBuild) === null || _h === void 0 ? void 0 : _h.call(hooks, { root, publicUrl, importmap, entryModule, schemaVersion }));
            const bundler = yield (0, bundler_1.callPiletDebug)({
                root,
                piral: appPackage.name,
                optimizeModules,
                hmr,
                externals,
                targetDir,
                importmap,
                outFile,
                outDir,
                entryModule: `./${(0, path_1.relative)(root, entryModule)}`,
                logLevel,
                version: schemaVersion,
                ignored,
                _,
            }, bundlerName);
            bundler.on((args) => {
                var _a;
                (_a = hooks.afterBuild) === null || _a === void 0 ? void 0 : _a.call(hooks, Object.assign(Object.assign({}, args), { root, publicUrl, importmap, entryModule, schemaVersion, bundler, outFile, outDir }));
            });
            return {
                emulator,
                appFile,
                publicUrl,
                appVersion: appPackage.version,
                externals,
                piral: appPackage.name,
                bundler,
                root,
            };
        }));
        // sanity check see #250
        checkSanity(pilets);
        yield ((_b = hooks.beforeApp) === null || _b === void 0 ? void 0 : _b.call(hooks, { appInstanceDir, pilets }));
        const appDir = appInstanceDir || (yield getOrMakeAppDir(pilets[0], logLevel));
        yield ((_c = hooks.afterApp) === null || _c === void 0 ? void 0 : _c.call(hooks, { appInstanceDir, pilets }));
        Promise.all(pilets.map((p) => p.bundler.ready())).then(() => (0, common_1.logDone)(`Ready!`));
        if (krasConfig.ssl === undefined) {
            krasConfig.ssl = undefined;
        }
        if (krasConfig.map === undefined) {
            krasConfig.map = {};
        }
        if (krasConfig.api === undefined) {
            krasConfig.api = '/manage-mock-server';
        }
        if (krasConfig.injectors === undefined) {
            krasConfig.injectors = kras_1.defaultConfig.injectors;
        }
        const _g = krasConfig.injectors, { pilet: piletInjector } = _g, otherInjectors = __rest(_g, ["pilet"]);
        const injectorConfig = Object.assign(Object.assign({ meta: 'debug-meta.json', feed }, piletInjector), { active: true, pilets, app: appDir, publicUrl, handle: ['/', api], api });
        krasConfig.map['/'] = '';
        krasConfig.map[api] = '';
        krasConfig.injectors = (0, common_1.reorderInjectors)(injectorName, injectorConfig, otherInjectors);
        (0, common_1.log)('generalVerbose_0004', `Using kras with configuration: ${JSON.stringify(krasConfig, undefined, 2)}`);
        const krasServer = (0, kras_1.buildKrasWithCli)(krasConfig);
        krasServer.setMaxListeners(maxListeners);
        krasServer.removeAllListeners('open');
        krasServer.on('open', (0, common_1.notifyServerOnline)(pilets.map((p) => p.bundler), publicUrl, krasConfig.api));
        yield ((_d = hooks.beforeOnline) === null || _d === void 0 ? void 0 : _d.call(hooks, { krasServer, krasConfig, open, port, api, feed, pilets, publicUrl }));
        yield krasServer.start();
        (0, common_1.openBrowser)(open, port, publicUrl, !!krasConfig.ssl);
        yield ((_e = hooks.afterOnline) === null || _e === void 0 ? void 0 : _e.call(hooks, { krasServer, krasConfig, open, port, api, feed, pilets, publicUrl }));
        yield new Promise((resolve) => krasServer.on('close', resolve));
        yield ((_f = hooks.onEnd) === null || _f === void 0 ? void 0 : _f.call(hooks, {}));
    });
}
exports.debugPilet = debugPilet;
//# sourceMappingURL=debug-pilet.js.map