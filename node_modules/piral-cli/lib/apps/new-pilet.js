"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newPilet = exports.newPiletDefaults = void 0;
const path_1 = require("path");
const types_1 = require("../types");
const common_1 = require("../common");
exports.newPiletDefaults = {
    target: '.',
    registry: common_1.config.registry,
    source: 'piral',
    forceOverwrite: common_1.ForceOverwrite.no,
    language: common_1.config.language,
    install: true,
    template: undefined,
    logLevel: types_1.LogLevels.info,
    npmClient: common_1.config.npmClient,
    bundlerName: 'none',
    variables: {},
};
function newPilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { target = exports.newPiletDefaults.target, registry = exports.newPiletDefaults.registry, source = exports.newPiletDefaults.source, forceOverwrite = exports.newPiletDefaults.forceOverwrite, language = exports.newPiletDefaults.language, install = exports.newPiletDefaults.install, template = exports.newPiletDefaults.template, logLevel = exports.newPiletDefaults.logLevel, bundlerName = exports.newPiletDefaults.bundlerName, variables = exports.newPiletDefaults.variables, } = options;
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        const root = (0, path_1.resolve)(fullBase, target);
        (0, common_1.setLogLevel)(logLevel);
        (0, common_1.progress)('Preparing source and target ...');
        const [sourceName, sourceVersion, hadVersion, type] = yield (0, common_1.dissectPackageName)(fullBase, source);
        const success = yield (0, common_1.createDirectory)(root);
        if (success) {
            const npmClient = yield (0, common_1.determineNpmClient)(root, options.npmClient);
            const projectName = (0, path_1.basename)(root);
            (0, common_1.progress)(`Scaffolding new pilet in %s ...`, root);
            yield (0, common_1.createFileIfNotExists)(root, 'package.json', JSON.stringify({
                name: projectName,
                version: '1.0.0',
                description: '',
                keywords: ['pilet'],
                dependencies: {},
                devDependencies: {},
                peerDependencies: {},
                scripts: {},
                main: 'dist/index.js',
                files: ['dist'],
            }, undefined, 2));
            yield (0, common_1.initNpmProject)(npmClient, projectName, root);
            if (registry !== exports.newPiletDefaults.registry) {
                (0, common_1.progress)(`Setting up npm registry (%s) ...`, registry);
                yield (0, common_1.createFileIfNotExists)(root, '.npmrc', `registry=${registry}
always-auth=true`, forceOverwrite);
            }
            const isLocal = (0, common_1.isLinkedPackage)(sourceName, type, hadVersion);
            if (!isLocal) {
                const packageRef = (0, common_1.combinePackageRef)(sourceName, sourceVersion, type);
                (0, common_1.progress)(`Installing npm package %s ...`, packageRef);
                yield (0, common_1.installNpmPackage)(npmClient, packageRef, root, '--save-dev', '--save-exact');
            }
            else {
                (0, common_1.progress)(`Using locally available npm package %s ...`, sourceName);
            }
            const packageName = yield (0, common_1.getPackageName)(root, sourceName, type);
            const packageVersion = (0, common_1.getPackageVersion)(hadVersion, sourceName, sourceVersion, type, root);
            const piralInfo = yield (0, common_1.readPiralPackage)(root, packageName);
            const isEmulator = (0, common_1.checkAppShellPackage)(piralInfo);
            const { preScaffold, postScaffold, files, template: preSelectedTemplate } = (0, common_1.getPiletsInfo)(piralInfo);
            if (preScaffold) {
                (0, common_1.progress)(`Running preScaffold script ...`);
                (0, common_1.log)('generalDebug_0003', `Run: ${preScaffold}`);
                yield (0, common_1.runScript)(preScaffold, root);
            }
            (0, common_1.progress)(`Taking care of templating ...`);
            const data = (0, common_1.getPiletScaffoldData)(language, root, packageName, variables);
            const chosenTemplate = template || preSelectedTemplate || 'default';
            yield (0, common_1.scaffoldPiletSourceFiles)(chosenTemplate, registry, data, forceOverwrite);
            if (isEmulator) {
                // in the emulator case we get the files (and files_once) from the contained tarballs
                yield (0, common_1.copyPiralFiles)(root, packageName, piralInfo, common_1.ForceOverwrite.yes, data);
            }
            else {
                // otherwise, we perform the same action as in the emulator creation
                // just with a different target; not a created directory, but the root
                const packageRoot = (0, common_1.getPiralPath)(root, packageName);
                yield (0, common_1.copyScaffoldingFiles)(packageRoot, root, files, piralInfo, data);
            }
            yield (0, common_1.patchPiletPackage)(root, packageName, packageVersion, piralInfo, isEmulator, {
                language,
                bundler: bundlerName,
            });
            if (install) {
                (0, common_1.progress)(`Installing dependencies ...`);
                yield (0, common_1.installNpmDependencies)(npmClient, root);
            }
            if (postScaffold) {
                (0, common_1.progress)(`Running postScaffold script ...`);
                (0, common_1.log)('generalDebug_0003', `Run: ${postScaffold}`);
                yield (0, common_1.runScript)(postScaffold, root);
            }
            (0, common_1.logDone)(`Pilet scaffolded successfully!`);
        }
        else {
            (0, common_1.fail)('cannotCreateDirectory_0044');
        }
    });
}
exports.newPilet = newPilet;
//# sourceMappingURL=new-pilet.js.map