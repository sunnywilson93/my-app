"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgradePilet = exports.upgradePiletDefaults = void 0;
const path_1 = require("path");
const types_1 = require("../types");
const common_1 = require("../common");
exports.upgradePiletDefaults = {
    version: undefined,
    target: '.',
    forceOverwrite: common_1.ForceOverwrite.no,
    logLevel: types_1.LogLevels.info,
    install: true,
    npmClient: undefined,
    variables: {},
};
function upgradePilet(baseDir = process.cwd(), options = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { version = exports.upgradePiletDefaults.version, target = exports.upgradePiletDefaults.target, forceOverwrite = exports.upgradePiletDefaults.forceOverwrite, logLevel = exports.upgradePiletDefaults.logLevel, install = exports.upgradePiletDefaults.install, variables = exports.upgradePiletDefaults.variables, } = options;
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        const root = (0, path_1.resolve)(fullBase, target);
        (0, common_1.setLogLevel)(logLevel);
        const valid = yield (0, common_1.checkExistingDirectory)(root);
        if (!valid) {
            (0, common_1.fail)('invalidPiletTarget_0040');
        }
        const npmClient = yield (0, common_1.determineNpmClient)(root, options.npmClient);
        const pckg = yield (0, common_1.readJson)(root, 'package.json');
        const { devDependencies = {}, dependencies = {}, piral, source } = pckg;
        if (piral && typeof piral === 'object') {
            const sourceName = piral.name;
            const language = /\.jsx?$/.test(source) ? common_1.SourceLanguage.js : common_1.SourceLanguage.ts;
            if (!sourceName || typeof sourceName !== 'string') {
                (0, common_1.fail)('invalidPiletPackage_0042');
            }
            const currentVersion = (_a = devDependencies[sourceName]) !== null && _a !== void 0 ? _a : dependencies[sourceName];
            if (!currentVersion || typeof currentVersion !== 'string') {
                (0, common_1.fail)('invalidPiralReference_0043');
            }
            const monorepoRef = yield (0, common_1.isMonorepoPackageRef)(sourceName, fullBase);
            const [packageRef, packageVersion] = yield (0, common_1.getCurrentPackageDetails)(fullBase, sourceName, currentVersion, version, root);
            const originalFiles = yield (0, common_1.getFileStats)(root, sourceName);
            if (!monorepoRef) {
                // only install the latest if the shell does come from remote
                (0, common_1.progress)(`Updating npm package to %s ...`, packageRef);
                yield (0, common_1.installNpmPackage)(npmClient, packageRef, root, '--no-save');
            }
            const piralInfo = yield (0, common_1.readPiralPackage)(root, sourceName);
            const isEmulator = (0, common_1.checkAppShellPackage)(piralInfo);
            const { preUpgrade, postUpgrade, files } = (0, common_1.getPiletsInfo)(piralInfo);
            if (preUpgrade) {
                (0, common_1.progress)(`Running preUpgrade script ...`);
                (0, common_1.log)('generalDebug_0003', `Run: ${preUpgrade}`);
                yield (0, common_1.runScript)(preUpgrade, root);
            }
            (0, common_1.progress)(`Taking care of templating ...`);
            const data = (0, common_1.getPiletScaffoldData)(language, root, sourceName, variables);
            if (isEmulator) {
                // in the emulator case we get the files from the contained tarball
                yield (0, common_1.copyPiralFiles)(root, sourceName, piralInfo, forceOverwrite, data, originalFiles);
            }
            else {
                // otherwise, we perform the same action as in the emulator creation
                // just with a different target; not a created directory, but the root
                const packageRoot = (0, common_1.getPiralPath)(root, sourceName);
                const notOnceFiles = files.filter((m) => typeof m === 'string' || !m.once);
                yield (0, common_1.copyScaffoldingFiles)(packageRoot, root, notOnceFiles, piralInfo, data);
            }
            yield (0, common_1.patchPiletPackage)(root, sourceName, packageVersion, piralInfo, isEmulator);
            if (install) {
                (0, common_1.progress)(`Updating dependencies ...`);
                yield (0, common_1.installNpmDependencies)(npmClient, root);
            }
            if (postUpgrade) {
                (0, common_1.progress)(`Running postUpgrade script ...`);
                (0, common_1.log)('generalDebug_0003', `Run: ${postUpgrade}`);
                yield (0, common_1.runScript)(postUpgrade, root);
            }
            (0, common_1.logDone)('Pilet upgraded successfully!');
        }
        else {
            (0, common_1.fail)('invalidPiletPackage_0041');
        }
    });
}
exports.upgradePilet = upgradePilet;
//# sourceMappingURL=upgrade-pilet.js.map