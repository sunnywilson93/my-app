"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.declarationPiral = exports.declarationPiralDefaults = void 0;
const path_1 = require("path");
const common_1 = require("../common");
const types_1 = require("../types");
exports.declarationPiralDefaults = {
    entry: './',
    target: './dist',
    forceOverwrite: common_1.ForceOverwrite.yes,
    logLevel: types_1.LogLevels.info,
};
function declarationPiral(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.declarationPiralDefaults.entry, target = exports.declarationPiralDefaults.target, forceOverwrite = exports.declarationPiralDefaults.forceOverwrite, logLevel = exports.declarationPiralDefaults.logLevel, } = options;
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        (0, common_1.setLogLevel)(logLevel);
        yield (0, common_1.createPiralDeclaration)(fullBase, entry, target, forceOverwrite, logLevel);
        (0, common_1.logDone)(`Declaration created successfully in "${target}"!`);
    });
}
exports.declarationPiral = declarationPiral;
//# sourceMappingURL=declaration-piral.js.map