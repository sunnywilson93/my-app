"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.select = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
function getPath() {
    try {
        return (0, path_1.dirname)(require.resolve('piral-cli/lib', {
            paths: [process.cwd()],
        }));
    }
    catch (_a) {
        return (0, path_1.dirname)(__filename);
    }
}
function select(from) {
    return __awaiter(this, void 0, void 0, function* () {
        const localPath = getPath();
        const localRunner = (0, path_1.resolve)(localPath, 'runner.js');
        if (localPath !== __dirname && (0, fs_1.existsSync)(localRunner)) {
            // If the runner exists and we found a more local installation use the new mode
            const ps = (0, child_process_1.fork)(localRunner, [], {
                cwd: process.cwd(),
            });
            ps.send({
                type: 'start',
                select: from.toString(),
                args: process.argv.slice(2),
            });
            ps.on('exit', (code) => process.exit(code));
        }
        else {
            // If no runner exists or we are in the same directory go for the classic mode
            const { start } = require((0, path_1.join)(localPath, 'start'));
            yield start(from);
        }
    });
}
exports.select = select;
//# sourceMappingURL=select.js.map