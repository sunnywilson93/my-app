"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const path_1 = require("path");
const fs_1 = require("fs");
const log_1 = require("../common/log");
const spec_1 = require("../common/spec");
const config_1 = require("../common/config");
const external_1 = require("../external");
const { host } = config_1.config;
function fillPiletMeta(pilet, basePath, metaFile) {
    const { root, bundler } = pilet;
    const metaPath = (0, path_1.join)(root, metaFile);
    const packagePath = (0, path_1.join)(root, 'package.json');
    const def = external_1.jju.parse((0, fs_1.readFileSync)(packagePath, 'utf8'));
    const metaOverride = (0, fs_1.existsSync)(metaPath) ? external_1.jju.parse((0, fs_1.readFileSync)(metaPath, 'utf8')) : undefined;
    const file = bundler.bundle.name.replace(/^[\/\\]/, '');
    const target = (0, path_1.join)(bundler.bundle.dir, file);
    const url = new url_1.URL(file, basePath);
    const meta = Object.assign(Object.assign(Object.assign({ custom: def.custom, config: def.piletConfig }, metaOverride), { name: def.name, version: def.version, link: `${url.href}?updated=${Date.now()}` }), (0, spec_1.getPiletSpecMeta)(target, basePath));
    pilet.meta = meta;
    return JSON.stringify(meta);
}
function loadFeed(feed) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield external_1.axios.default.get(feed);
            if (Array.isArray(response.data)) {
                return response.data;
            }
            else if (Array.isArray((_a = response.data) === null || _a === void 0 ? void 0 : _a.items)) {
                return response.data.items;
            }
            else {
                return [response.data];
            }
        }
        catch (e) {
            (0, log_1.log)('generalWarning_0001', `Couldn't load feed at ${feed}.`);
        }
    });
}
class PiletInjector {
    constructor(options, config, core) {
        this.config = options;
        // either take a full URI or make it an absolute path relative to the current origin
        this.piletApi = /^https?:/.test(options.api)
            ? options.api
            : `${config.ssl ? 'https' : 'http'}://${host}:${config.port}${options.api}`;
        const { pilets, api, publicUrl } = options;
        this.indexPath = `${publicUrl}index.html`;
        const cbs = {};
        core.on('user-connected', (e) => {
            if (e.target === '*' && e.url === api.substring(1)) {
                cbs[e.id] = (msg) => e.ws.send(msg);
            }
        });
        core.on('user-disconnected', (e) => {
            delete cbs[e.id];
        });
        pilets.forEach((p, i) => p.bundler.on(() => {
            const basePath = `${this.piletApi}/${i}/`;
            const meta = fillPiletMeta(p, basePath, options.meta);
            for (const id of Object.keys(cbs)) {
                cbs[id](meta);
            }
        }));
    }
    get active() {
        return this.config.active;
    }
    set active(value) {
        this.config.active = value;
    }
    get name() {
        return 'pilet-injector';
    }
    getOptions() {
        return {};
    }
    setOptions() { }
    getMeta() {
        return __awaiter(this, void 0, void 0, function* () {
            const { pilets, feed } = this.config;
            const localPilets = pilets.map((pilet) => pilet.meta).filter(Boolean);
            const mergedPilets = this.mergePilets(localPilets, yield this.loadRemoteFeed(feed));
            return JSON.stringify(mergedPilets);
        });
    }
    loadRemoteFeed(feed) {
        return __awaiter(this, void 0, void 0, function* () {
            if (feed) {
                const feeds = Array.isArray(feed) ? feed : [feed];
                return yield Promise.all(feeds.map(loadFeed));
            }
        });
    }
    mergePilets(localPilets, remoteFeeds) {
        if (!remoteFeeds) {
            return localPilets;
        }
        const names = localPilets.map((pilet) => pilet.name);
        const merged = [...localPilets];
        for (const remotePilets of remoteFeeds) {
            const newPilets = remotePilets.filter((pilet) => pilet.name !== undefined && !names.includes(pilet.name));
            names.push(...newPilets.map((p) => p.name));
            merged.push(...newPilets);
        }
        return merged;
    }
    sendContent(content, type, url) {
        return {
            injector: { name: this.name },
            headers: {
                'content-type': type,
                'cache-control': 'no-cache, no-store, must-revalidate',
                pragma: 'no-cache',
                expires: '0',
            },
            status: { code: 200 },
            url,
            content,
        };
    }
    sendFile(target, url) {
        var _a;
        const content = (0, fs_1.readFileSync)(target);
        const type = (_a = external_1.mime.getType(target)) !== null && _a !== void 0 ? _a : 'application/octet-stream';
        return this.sendContent(content, type, url);
    }
    sendResponse(path, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const { pilets } = this.config;
            const [index, ...rest] = path.split('/');
            const pilet = pilets[+index];
            const bundler = pilet === null || pilet === void 0 ? void 0 : pilet.bundler;
            if (!path) {
                yield (bundler === null || bundler === void 0 ? void 0 : bundler.ready());
                const content = yield this.getMeta();
                return this.sendContent(content, 'application/json', url);
            }
            else {
                return bundler === null || bundler === void 0 ? void 0 : bundler.ready().then(() => {
                    const target = (0, path_1.join)(bundler.bundle.dir, rest.join('/'));
                    if ((0, fs_1.existsSync)(target) && (0, fs_1.statSync)(target).isFile()) {
                        return this.sendFile(target, url);
                    }
                });
            }
        });
    }
    sendIndexFile(target, url) {
        const indexHtml = (0, fs_1.readFileSync)(target, 'utf8');
        // mechanism to inject server side debug piletApi config into piral emulator
        const windowInjectionScript = `window['dbg:pilet-api'] = '${this.piletApi}';`;
        const findStr = `<script`;
        const replaceStr = `<script>/* Pilet Debugging Emulator Config Injection */${windowInjectionScript}</script><script`;
        const content = indexHtml.replace(`${findStr}`, `${replaceStr}`);
        return this.sendContent(content, external_1.mime.getType(target), url);
    }
    handle(req) {
        const { app, api, publicUrl } = this.config;
        if (!req.target) {
            if (req.url.startsWith(publicUrl)) {
                const path = req.url.substring(publicUrl.length).split('?')[0];
                const target = (0, path_1.join)(app, path);
                if ((0, fs_1.existsSync)(target) && (0, fs_1.statSync)(target).isFile()) {
                    if (req.url === this.indexPath) {
                        return this.sendIndexFile(target, req.url);
                    }
                    else {
                        return this.sendFile(target, req.url);
                    }
                }
                else if (req.url !== this.indexPath) {
                    return this.handle(Object.assign(Object.assign({}, req), { url: this.indexPath }));
                }
            }
            return undefined;
        }
        else if (req.target === api) {
            const path = req.url.substring(1).split('?')[0];
            return this.sendResponse(path, req.url);
        }
    }
}
exports.default = PiletInjector;
//# sourceMappingURL=pilet.js.map