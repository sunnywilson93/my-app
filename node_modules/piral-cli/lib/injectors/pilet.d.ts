/// <reference types="node" />
import { EventEmitter } from 'events';
import { KrasInjector, KrasResponse, KrasRequest, KrasInjectorConfig, KrasConfiguration, KrasResult } from 'kras';
import { Bundler } from '../types';
interface Pilet {
    bundler: Bundler;
    root: string;
    meta: PiletMetadata;
}
export interface PiletInjectorConfig extends KrasInjectorConfig {
    pilets: Array<Pilet>;
    publicUrl: string;
    meta: string;
    api: string;
    app: string;
    feed?: string;
}
interface PiletMetadata {
    name?: string;
    [key: string]: unknown;
}
export default class PiletInjector implements KrasInjector {
    config: PiletInjectorConfig;
    private piletApi;
    private indexPath;
    constructor(options: PiletInjectorConfig, config: KrasConfiguration, core: EventEmitter);
    get active(): boolean;
    set active(value: boolean);
    get name(): string;
    getOptions(): {};
    setOptions(): void;
    getMeta(): Promise<string>;
    loadRemoteFeed(feed?: string | Array<string>): Promise<Array<Array<PiletMetadata>>>;
    mergePilets(localPilets: Array<PiletMetadata>, remoteFeeds: Array<Array<PiletMetadata>>): PiletMetadata[];
    sendContent(content: Buffer | string, type: string, url: string): KrasResponse;
    sendFile(target: string, url: string): KrasResponse;
    sendResponse(path: string, url: string): Promise<KrasResult>;
    sendIndexFile(target: string, url: string): KrasResponse;
    handle(req: KrasRequest): KrasResponse;
}
export {};
