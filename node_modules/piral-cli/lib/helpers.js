"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyOfPiletLanguage = exports.valueOfPiletLanguage = exports.piletLanguageKeys = exports.keyOfForceOverwrite = exports.valueOfForceOverwrite = exports.forceOverwriteKeys = exports.frameworkKeys = exports.availableReleaseProviders = exports.availableBundlers = exports.bundlerKeys = exports.clientTypeKeys = exports.piletBuildTypeKeys = exports.piralBuildTypeKeys = exports.fromKeys = exports.publishModeKeys = exports.schemaKeys = void 0;
const enums_1 = require("./common/enums");
const constants_1 = require("./common/constants");
exports.schemaKeys = ['v0', 'v1', 'v2', 'none'];
exports.publishModeKeys = ['none', 'basic', 'bearer', 'digest'];
exports.fromKeys = ['local', 'remote', 'npm'];
exports.piralBuildTypeKeys = ['all', 'release', 'emulator', 'emulator-sources'];
exports.piletBuildTypeKeys = ['default', 'standalone', 'manifest'];
exports.clientTypeKeys = ['npm', 'pnpm', 'yarn', 'lerna', 'rush'];
exports.bundlerKeys = ['none', ...constants_1.bundlerNames];
exports.availableBundlers = [];
exports.availableReleaseProviders = [];
exports.frameworkKeys = [...constants_1.frameworkLibs];
exports.forceOverwriteKeys = Object.keys(enums_1.ForceOverwrite).filter((m) => typeof enums_1.ForceOverwrite[m] === 'number');
function valueOfForceOverwrite(key) {
    for (const forceOverwriteKey of exports.forceOverwriteKeys) {
        if (forceOverwriteKey === key) {
            return enums_1.ForceOverwrite[forceOverwriteKey];
        }
    }
    return enums_1.ForceOverwrite.no;
}
exports.valueOfForceOverwrite = valueOfForceOverwrite;
function keyOfForceOverwrite(value) {
    for (const forceOverwriteKey of exports.forceOverwriteKeys) {
        if (enums_1.ForceOverwrite[forceOverwriteKey] === value) {
            return forceOverwriteKey;
        }
    }
    return exports.forceOverwriteKeys[0];
}
exports.keyOfForceOverwrite = keyOfForceOverwrite;
exports.piletLanguageKeys = Object.keys(enums_1.SourceLanguage).filter((m) => typeof enums_1.SourceLanguage[m] === 'number');
function valueOfPiletLanguage(key) {
    for (const piletLanguageKey of exports.piletLanguageKeys) {
        if (piletLanguageKey === key) {
            return enums_1.SourceLanguage[piletLanguageKey];
        }
    }
    return enums_1.SourceLanguage.ts;
}
exports.valueOfPiletLanguage = valueOfPiletLanguage;
function keyOfPiletLanguage(value) {
    for (const piletLanguageKey of exports.piletLanguageKeys) {
        if (enums_1.SourceLanguage[piletLanguageKey] === value) {
            return piletLanguageKey;
        }
    }
    return exports.piletLanguageKeys[0];
}
exports.keyOfPiletLanguage = keyOfPiletLanguage;
//# sourceMappingURL=helpers.js.map