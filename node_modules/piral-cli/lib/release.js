"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishArtifacts = exports.setReleaseProvider = void 0;
const path_1 = require("path");
const common_1 = require("./common");
const helpers_1 = require("./helpers");
const providers = {
    none() {
        return Promise.resolve();
    },
    xcopy(files, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { target } = args;
            if (!target) {
                (0, common_1.fail)('publishXcopyMissingTarget_0112');
            }
            yield Promise.all(files.map((file) => __awaiter(this, void 0, void 0, function* () { return (0, common_1.copy)(file, (0, path_1.resolve)(target, (0, path_1.basename)(file))); })));
        });
    },
};
function findReleaseProvider(providerName) {
    const provider = providers[providerName];
    if (typeof provider !== 'function') {
        (0, common_1.fail)('publishProviderMissing_0113', providerName, helpers_1.availableReleaseProviders);
    }
    return provider;
}
helpers_1.availableReleaseProviders.push(...Object.keys(providers));
function setReleaseProvider(provider) {
    providers[provider.name] = provider.action;
    if (!helpers_1.availableReleaseProviders.includes(provider.name)) {
        helpers_1.availableReleaseProviders.push(provider.name);
    }
}
exports.setReleaseProvider = setReleaseProvider;
function publishArtifacts(providerName, files, args) {
    const runRelease = findReleaseProvider(providerName);
    return runRelease(files, args);
}
exports.publishArtifacts = publishArtifacts;
//# sourceMappingURL=release.js.map