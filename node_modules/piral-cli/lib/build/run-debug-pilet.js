"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
let handler;
let bundler;
function run(root, targetDir, outDir, outFile, piral, externals, importmap, entryModule, version, logLevel, args) {
    (0, common_1.setStandardEnvs)({
        production: false,
        piral,
        root,
    });
    return handler.create({
        root,
        piral,
        entryModule,
        targetDir,
        outDir,
        outFile: 'index.js',
        externals,
        importmap,
        version,
        develop: true,
        sourceMaps: true,
        contentHash: true,
        minify: false,
        logLevel,
        watch: true,
        args,
    });
}
process.on('message', (msg) => __awaiter(void 0, void 0, void 0, function* () {
    const root = process.cwd();
    try {
        switch (msg.type) {
            case 'init':
                handler = require(msg.path);
                break;
            case 'bundle':
                if (bundler) {
                    yield bundler.bundle();
                }
                break;
            case 'start':
                bundler = yield run(root, msg.targetDir, msg.outDir, msg.outFile, msg.piral, msg.externals, msg.importmap, msg.entryModule, msg.version, msg.logLevel, msg);
                if (bundler) {
                    bundler.onStart(() => {
                        process.send({
                            type: 'pending',
                        });
                    });
                    bundler.onEnd((result) => {
                        if (msg.hmr) {
                            process.send({
                                type: 'update',
                                outHash: result.hash,
                                outName: result.name,
                                args: {
                                    requireRef: result.requireRef,
                                    version: msg.version,
                                    root,
                                },
                            });
                        }
                    });
                    process.send({
                        type: 'done',
                        outDir: msg.outDir,
                    });
                }
                break;
        }
    }
    catch (error) {
        process.send({
            type: 'fail',
            error: error === null || error === void 0 ? void 0 : error.message,
        });
    }
}));
//# sourceMappingURL=run-debug-pilet.js.map