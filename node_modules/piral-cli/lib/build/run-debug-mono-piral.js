"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const common_1 = require("../common");
let handler;
function run(root, outFile, outDir, piral, hmr, externals, entryFiles, logLevel, args) {
    (0, common_1.progress)(`Preparing supplied Piral instance ...`);
    (0, common_1.setStandardEnvs)({
        piral,
        dependencies: externals,
        publicPath: '/',
        production: false,
        debugPiral: true,
        debugPilet: true,
        root,
    });
    return handler.create({
        root,
        entryFiles,
        outFile,
        outDir,
        externals,
        emulator: true,
        sourceMaps: true,
        contentHash: false,
        minify: false,
        publicUrl: '/',
        hmr,
        logLevel,
        watch: true,
        args,
    });
}
process.on('message', (msg) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        switch (msg.type) {
            case 'init':
                handler = require(msg.path);
                break;
            case 'start':
                const root = process.cwd();
                const outDir = (0, path_1.resolve)(root, 'dist', 'app');
                const bundler = yield run(root, msg.outFile, outDir, msg.piral, true, msg.externals, msg.entryFiles, msg.logLevel, msg);
                const result = yield bundler.bundle();
                (0, common_1.logReset)();
                if (result) {
                    process.send({
                        type: 'done',
                        outDir: result.outDir,
                        outFile: result.outFile,
                    });
                }
                break;
        }
    }
    catch (error) {
        process.send({
            type: 'fail',
            error: error === null || error === void 0 ? void 0 : error.message,
        });
    }
}));
//# sourceMappingURL=run-debug-mono-piral.js.map