"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNotificationsApi = void 0;
const actions = require("./actions");
const react_1 = require("react");
const piral_core_1 = require("piral-core");
const default_1 = require("./default");
const Notifications_1 = require("./Notifications");
function isElement(element) {
    return (0, react_1.isValidElement)(element);
}
function toComponent(component) {
    if (typeof component === 'string') {
        const text = component;
        return () => (0, piral_core_1.defaultRender)(text);
    }
    else if ((0, react_1.isValidElement)(component)) {
        const element = component;
        return () => element;
    }
    return component;
}
function createNotification(context, id, content, defaultOptions, customOptions = {}) {
    const options = Object.assign(Object.assign({}, defaultOptions), customOptions);
    const notification = {
        id,
        component: toComponent(content),
        options,
        close() {
            setTimeout(() => context.closeNotification(notification), 0);
        },
    };
    if (typeof options.autoClose === 'number' && options.autoClose > 0) {
        setTimeout(notification.close, options.autoClose);
    }
    return notification;
}
function getNotifications(context, messages, defaultOptions) {
    const notifications = [];
    let i = 0;
    for (const { content, options } of messages) {
        notifications.push(createNotification(context, `global-${i++}`, content, defaultOptions, options));
    }
    return notifications;
}
function withNotifications(notifications) {
    return (state) => (Object.assign(Object.assign({}, state), { components: Object.assign({ NotificationsHost: default_1.DefaultHost, NotificationsToast: default_1.DefaultToast }, state.components), notifications }));
}
/**
 * Creates new Pilet API extensions for showing notifications.
 */
function createNotificationsApi(config = {}) {
    const { defaultOptions = {}, selectId = () => `${~~(Math.random() * 10000)}`, messages = [] } = config;
    return (context) => {
        context.defineActions(actions);
        context.dispatch((0, piral_core_1.withAll)(withNotifications(getNotifications(context, messages, defaultOptions)), (0, piral_core_1.withRootExtension)('piral-notifications', Notifications_1.Notifications)));
        return (api) => ({
            showNotification(content, customOptions) {
                const Component = typeof content === 'string'
                    ? content
                    : isElement(content)
                        ? content
                        : (0, piral_core_1.withApi)(context, content, api, 'extension');
                const notification = createNotification(context, selectId(), Component, defaultOptions, customOptions);
                context.openNotification(notification);
                return notification.close;
            },
        });
    };
}
exports.createNotificationsApi = createNotificationsApi;
//# sourceMappingURL=create.js.map