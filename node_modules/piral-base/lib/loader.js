"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultLoader = exports.extendLoader = void 0;
const dependency_1 = require("./dependency");
const umd_1 = require("./umd");
const legacy_1 = require("./legacy");
const system_1 = require("./system");
const inBrowser = typeof document !== 'undefined';
/**
 * Extends the default loader with the spec loaders, if any are given.
 * @param fallback The loader to use if none of the spec loaders matches.
 * @param specLoaders The spec loaders to use.
 * @returns The loader.
 */
function extendLoader(fallback, specLoaders) {
    if (typeof specLoaders === 'object' && specLoaders) {
        return (meta) => {
            if (typeof meta.spec === 'string') {
                const loaderOverride = specLoaders[meta.spec];
                if (typeof loaderOverride === 'function') {
                    return loaderOverride(meta);
                }
            }
            return fallback(meta);
        };
    }
    return fallback;
}
exports.extendLoader = extendLoader;
/**
 * Gets the default loader provided by piral-base.
 * @param config The loader configuration.
 * @returns The function to load a pilet from metadata.
 */
function getDefaultLoader(config = {}) {
    return (meta) => {
        if (inBrowser && 'link' in meta && meta.spec === 'v2') {
            return (0, system_1.loadSystemPilet)(meta);
        }
        else if (inBrowser && 'requireRef' in meta && meta.spec !== 'v2') {
            return (0, umd_1.loadUmdPilet)(meta, config, dependency_1.includeDependency);
        }
        else if (inBrowser && 'bundle' in meta && meta.bundle) {
            return (0, umd_1.loadUmdPilet)(meta, config, dependency_1.includeBundle);
        }
        else {
            return (0, legacy_1.loadLegacyPilet)(meta);
        }
    };
}
exports.getDefaultLoader = getDefaultLoader;
//# sourceMappingURL=loader.js.map