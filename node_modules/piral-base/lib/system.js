"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerModule = exports.registerDependencies = exports.loadSystemModule = exports.loadSystemPilet = void 0;
require("systemjs/dist/system.js");
require("systemjs/dist/extras/named-register.js");
const utils_1 = require("./utils");
function isPrimitiveExport(content) {
    const type = typeof content;
    return (type === 'number' ||
        type === 'boolean' ||
        type === 'symbol' ||
        type === 'string' ||
        type === 'bigint' ||
        Array.isArray(content));
}
const systemRegister = System.constructor.prototype.register;
System.constructor.prototype.register = function (...args) {
    const getContent = args.pop();
    args.push((_export, ctx) => {
        const exp = (...p) => {
            if (p.length === 1) {
                const content = p[0];
                if (content instanceof Promise) {
                    return content.then(exp);
                }
                else if (typeof content === 'function') {
                    _export('__esModule', true);
                    Object.keys(content).forEach((prop) => {
                        _export(prop, content[prop]);
                    });
                    _export('default', content);
                }
                else if (isPrimitiveExport(content)) {
                    _export('__esModule', true);
                    _export('default', content);
                }
                else if (content) {
                    _export(content);
                    if (typeof content === 'object' && !('default' in content)) {
                        _export('default', content);
                    }
                }
            }
            else {
                _export(...p);
            }
        };
        return getContent(exp, ctx);
    });
    return systemRegister.apply(this, args);
};
/**
 * Loads the provided SystemJS-powered pilet.
 * @param meta The pilet's metadata.
 */
function loadSystemPilet(meta) {
    const deps = meta.dependencies;
    const link = (0, utils_1.setBasePath)(meta, meta.link);
    if (deps) {
        for (const depName of Object.keys(deps)) {
            if (!System.has(depName)) {
                registerModule(depName, () => System.import(deps[depName]));
            }
        }
    }
    return loadSystemModule(link).then(([_, app]) => (Object.assign(Object.assign({}, app), meta)));
}
exports.loadSystemPilet = loadSystemPilet;
/**
 * Loads the provided modules by their URL. Performs a
 * SystemJS import.
 * @param modules The names of the modules to resolve.
 */
function loadSystemModule(source) {
    return System.import(source).then((value) => [source, value], (error) => {
        console.error('Failed to load SystemJS module', source, error);
        return [source, {}];
    });
}
exports.loadSystemModule = loadSystemModule;
/**
 * Registers all static global dependencies in the system.
 * @param modules The modules to register as dependencies.
 * @returns A promise when SystemJS included all dependencies.
 */
function registerDependencies(modules) {
    const moduleNames = Object.keys(modules);
    moduleNames.forEach((name) => registerModule(name, () => modules[name]));
    return Promise.all(moduleNames.map((name) => System.import(name)));
}
exports.registerDependencies = registerDependencies;
/**
 * Registers a plain module in SystemJS.
 * @param name The name of the module
 * @param resolve The resolver for the module's content.
 */
function registerModule(name, resolve) {
    System.register(name, [], (_exports) => ({
        execute() {
            const content = resolve();
            if (content instanceof Promise) {
                return content.then(_exports);
            }
            else {
                _exports(content);
            }
        },
    }));
}
exports.registerModule = registerModule;
//# sourceMappingURL=system.js.map