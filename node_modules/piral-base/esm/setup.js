import { cleanup } from './cleanup';
function logError(name, e) {
    console.error(`Error while setting up ${name}.`, e);
}
function withCatch(result, name) {
    if (result instanceof Promise) {
        return result.catch((e) => logError(name, e));
    }
    return result;
}
/**
 * Sets up the given single pilet by calling the exported `setup`
 * function on the pilet with the created API.
 * @param app The pilet's evaluated content.
 * @param api The generated API for the pilet.
 */
export function setupSinglePilet(app, api) {
    try {
        const result = app.setup(api);
        const evtName = 'unload-pilet';
        const handler = (e) => {
            if (e.name === app.name) {
                api.off(evtName, handler);
                if (typeof app.teardown === 'function') {
                    app.teardown(api);
                }
                cleanup(app);
            }
        };
        api.on(evtName, handler);
        return withCatch(result, app === null || app === void 0 ? void 0 : app.name);
    }
    catch (e) {
        logError(app === null || app === void 0 ? void 0 : app.name, e);
    }
}
/**
 * Sets up the given multi pilet by calling the exported `setup`
 * function on the pilet with the API factory.
 * @param app The pilet's evaluated content.
 * @param apiFactory The API factory to be used in the bundle.
 */
export function setupMultiPilet(app, apiFactory) {
    try {
        return withCatch(app.setup(apiFactory), app === null || app === void 0 ? void 0 : app.name);
    }
    catch (e) {
        logError(app === null || app === void 0 ? void 0 : app.name, e);
    }
}
/**
 * Sets up the given pilet by calling the exported `setup` function
 * on the pilet.
 * @param app The pilet's evaluated content.
 * @param apiFactory The API factory to be used in the bundle.
 */
export function setupPilet(app, apiFactory) {
    if ('bundle' in app) {
        return setupMultiPilet(app, apiFactory);
    }
    else {
        return setupSinglePilet(app, apiFactory(app));
    }
}
//# sourceMappingURL=setup.js.map