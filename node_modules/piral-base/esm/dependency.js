function tryResolve(name, parent) {
    try {
        return System.resolve(name, parent);
    }
    catch (_a) {
        // just ignore - will be handled differently later.
        return undefined;
    }
}
function requireModule(name, parent) {
    const moduleId = tryResolve(name, parent);
    const dependency = moduleId && System.get(moduleId);
    if (!dependency) {
        const error = new Error(`Cannot find module '${name}'`);
        error.code = 'MODULE_NOT_FOUND';
        throw error;
    }
    return dependency;
}
function checkPiletApp(name, app) {
    if (!app) {
        console.error('Invalid module found.', name);
    }
    else if (typeof app.setup !== 'function') {
        console.warn('Setup function is missing.', name);
    }
    else {
        return app;
    }
    return {
        setup() { },
    };
}
function checkPiletAppAsync(name, app) {
    return Promise.resolve(app).then((resolvedApp) => checkPiletApp(name, resolvedApp));
}
/**
 * Compiles the given content from a generic dependency.
 * @param name The name of the dependency to compile.
 * @param content The content of the dependency to compile.
 * @param link The optional link to the dependency.
 * @returns The evaluated dependency.
 */
export function evalDependency(name, content, link = '') {
    const mod = {
        exports: {},
    };
    try {
        const sourceUrl = link && `\n//# sourceURL=${link}`;
        const importer = new Function('module', 'exports', 'require', content + sourceUrl);
        const parent = link || name;
        const require = (moduleId) => requireModule(moduleId, parent);
        importer(mod, mod.exports, require);
    }
    catch (e) {
        console.error(`Error while evaluating ${name}.`, e);
    }
    return mod.exports;
}
/**
 * Compiles the given content from a module with a dependency resolution.
 * @param name The name of the dependency to compile.
 * @param content The content of the dependency to compile.
 * @param link The optional link to the dependency.
 * @returns The evaluated module.
 */
export function compileDependency(name, content, link = '') {
    const app = evalDependency(name, content, link);
    return checkPiletAppAsync(name, app);
}
function includeScript(piletName, depName, link, integrity, crossOrigin) {
    window[depName] = (moduleId) => requireModule(moduleId, link);
    return includeScriptDependency(link, integrity, crossOrigin).then((s) => checkPiletAppAsync(piletName, s.app), () => checkPiletApp(piletName));
}
/**
 * Includes a dependency as a script.
 * @param link The link to the script.
 * @param integrity The integrity for the script, if any.
 * @param crossOrigin Defines if cross-origin should be used.
 * @returns The script element.
 */
export function includeScriptDependency(link, integrity, crossOrigin) {
    return new Promise((resolve, reject) => {
        const s = document.createElement('script');
        s.async = true;
        s.src = link;
        if (integrity) {
            s.crossOrigin = crossOrigin || 'anonymous';
            s.integrity = integrity;
        }
        else if (crossOrigin) {
            s.crossOrigin = crossOrigin;
        }
        s.onload = () => resolve(s);
        s.onerror = () => reject();
        document.body.appendChild(s);
    });
}
/**
 * Includes the given single pilet script via its URL with a dependency resolution.
 * @param meta The meta data of the dependency to include.
 * @param crossOrigin The override for the cross-origin attribute.
 * @returns The evaluated module.
 */
export function includeDependency(meta, crossOrigin) {
    return includeScript(meta.name, meta.requireRef, meta.link, meta.integrity, crossOrigin);
}
/**
 * Includes the given bundle script via its URL with a dependency resolution.
 * @param meta The meta data of the dependency to include.
 * @param crossOrigin The override for the cross-origin attribute.
 * @returns The evaluated module.
 */
export function includeBundle(meta, crossOrigin) {
    var _a;
    return includeScript((_a = meta.name) !== null && _a !== void 0 ? _a : '(bundle)', meta.bundle, meta.link, meta.integrity, crossOrigin);
}
//# sourceMappingURL=dependency.js.map