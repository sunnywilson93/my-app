"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runFromCli = exports.connectToCli = exports.runWithKras = exports.withKras = exports.runKras = exports.buildKrasWithCli = exports.buildKras = exports.readKrasConfig = exports.MockServer = void 0;
const chalk = require("chalk");
const os_1 = require("os");
const path_1 = require("path");
const core_1 = require("./core");
const info_1 = require("./info");
const config_1 = require("./core/config");
const injectors_1 = require("./injectors");
const management_1 = require("./management");
const helpers_1 = require("./helpers");
function info(message) {
    return message && message.length > 50 ? message.substr(0, 47) + ' ...' : message;
}
function isDebug(logLevel) {
    // level is debug, i.e., strongest level already
    return logLevel === 'debug';
}
function isInfo(logLevel) {
    // level is not error, i.e., at least info is given
    return logLevel !== 'error';
}
function isError(logLevel) {
    // no matter what the level is, the minimum level is always error
    return !!logLevel;
}
function disposeInjector(injector) {
    if (injector && typeof injector.dispose === 'function') {
        injector.dispose();
    }
}
class MockServer extends core_1.MockServerCore {
    constructor(config) {
        super(config);
        this.injectors = [];
        this.middlewares = [];
        this.logs = [];
        this.logLevel = config.logLevel || 'error';
        this.on('error', (e) => this.log('error', e));
        if (config.api === false) {
            this.recorder.disable();
        }
        management_1.withManagement(this, config);
        injectors_1.withInjectors(this, config);
        helpers_1.withMiddlewares(this, config);
        helpers_1.withFiles(this, config);
    }
    stop() {
        return super.stop().then(() => this.injectors.forEach(disposeInjector));
    }
    log(type, data) {
        const item = {
            type,
            data,
            time: new Date(),
        };
        this.logs.push(item);
        this.emit('logged', item);
    }
}
exports.MockServer = MockServer;
function readKrasConfig(options, file) {
    const dir = options.dir ? path_1.resolve(info_1.currentDir, options.dir) : info_1.currentDir;
    return config_1.mergeConfiguration(options, config_1.readConfiguration(os_1.homedir(), info_1.krasrc), config_1.readConfiguration(dir, info_1.krasrc), config_1.readConfiguration(dir, file !== info_1.krasrc && file));
}
exports.readKrasConfig = readKrasConfig;
function buildKras(config) {
    return new MockServer(config_1.buildConfiguration(config));
}
exports.buildKras = buildKras;
function buildKrasWithCli(config) {
    const server = buildKras(config);
    connectToCli(server, config.api !== false);
    return server;
}
exports.buildKrasWithCli = buildKrasWithCli;
function runKras(config) {
    const server = buildKras(config);
    server.start();
    return server;
}
exports.runKras = runKras;
function withKras(config) {
    return (callback) => {
        const server = buildKras(config);
        helpers_1.configureHandler(server, config);
        return helpers_1.runWith(server, callback);
    };
}
exports.withKras = withKras;
function runWithKras(cb, config) {
    return withKras(config)(cb);
}
exports.runWithKras = runWithKras;
function connectToCli(server, canManage = true) {
    server.on('open', (svc) => {
        const port = chalk.green(svc.port);
        const protocol = svc.protocol;
        const server = `${protocol}://localhost:${port}`;
        console.log(`Server listening at port ${port} (${protocol.toUpperCase()}).`);
        if (canManage) {
            const manage = svc.routes[0] || '/manage';
            console.log(`Management app: ${server}${manage}`);
        }
    });
    server.on('close', (svc) => {
        console.log(`Connection to server closed.`);
    });
    server.on('user-connected', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green('WS')} + ${chalk.white(info(msg.id))}`);
        }
    });
    server.on('user-disconnected', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green('WS')} - ${chalk.white(info(msg.id))}`);
        }
    });
    server.on('message', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green('WS')} << ${chalk.white(info(msg.content))}`);
        }
    });
    server.on('broadcast', (msg) => {
        if (isInfo(server.logLevel)) {
            console.log(`${chalk.green('WS')} >> ${chalk.white(info(msg.content))}`);
        }
    });
    server.on('missing', (req) => {
        if (isError(server.logLevel)) {
            console.log(`${chalk.yellow(req.method)} ${chalk.gray(req.target)}${chalk.white(req.url)}`);
        }
    });
    server.on('request', (req) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green(req.method)} ${chalk.gray(req.target)}${chalk.white(req.url)}`);
        }
    });
    server.on('error', (msg) => {
        if (isError(server.logLevel)) {
            console.log(`${chalk.red('ERR')} ${chalk.white(msg)}`);
        }
    });
    server.on('debug', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.yellow('DBG')} ${chalk.white(msg)}`);
        }
    });
    server.on('info', (msg) => {
        if (isInfo(server.logLevel)) {
            console.log(`${chalk.bgWhite(chalk.black('INF'))} ${chalk.white(msg)}`);
        }
    });
}
exports.connectToCli = connectToCli;
function runFromCli(options, rcfile) {
    const config = readKrasConfig(options, rcfile);
    const server = buildKrasWithCli(config);
    console.log(`Starting kras v${info_1.version} ...`);
    server.start();
    return server;
}
exports.runFromCli = runFromCli;
