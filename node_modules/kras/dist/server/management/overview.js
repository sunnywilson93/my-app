"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorDetails = exports.messageDetails = exports.requestDetails = exports.liveData = exports.overview = void 0;
const helpers_1 = require("../helpers");
function get(items, id) {
    for (const item of items) {
        if (item.id === id) {
            return item;
        }
    }
}
function getType(content) {
    try {
        const value = JSON.parse(content);
        return typeof value;
    }
    catch (e) {
        return typeof content;
    }
}
function convertRequest(item) {
    return {
        id: item.id,
        time: item.start,
        from: item.request.target,
        to: item.request.url,
        status: item.response.status.code,
        type: item.response.headers['content-type'],
        injector: item.response.injector.name,
    };
}
function convertMessage(item) {
    return {
        id: item.id,
        time: item.time,
        type: getType(item.content),
        size: item.content.length,
        received: item.from,
        origin: item.remote ? 'server' : item.from === 'kras' ? 'broadcast' : 'client',
    };
}
function convertMiss(item) {
    return {
        id: item.id,
        time: item.start,
        from: item.request.target,
        to: item.request.url,
        type: item.request.headers.accept,
    };
}
function overview(server) {
    return (req, res) => {
        res.json({
            requests: helpers_1.mapReverse(server.recorder.requests, convertRequest),
            errors: helpers_1.mapReverse(server.recorder.errors, convertMiss),
            messages: helpers_1.mapReverse(server.recorder.messages, convertMessage),
        });
    };
}
exports.overview = overview;
function liveData(server) {
    const clients = [];
    const broadcast = (type, data) => {
        for (const client of clients) {
            client.send(JSON.stringify({
                type,
                data,
            }));
        }
    };
    server.recorder.on('recorded-request', (item) => {
        broadcast('request', convertRequest(item));
    });
    server.recorder.on('recorded-message', (item) => {
        broadcast('message', convertMessage(item));
    });
    server.recorder.on('recorded-miss', (item) => {
        broadcast('error', convertMiss(item));
    });
    return (ws) => {
        clients.push(ws);
        ws.on('close', () => {
            clients.splice(clients.indexOf(ws), 1);
        });
    };
}
exports.liveData = liveData;
function requestDetails(server) {
    return (req, res) => {
        const id = req.params.id;
        const data = get(server.recorder.requests, id);
        res.json(data || {});
    };
}
exports.requestDetails = requestDetails;
function messageDetails(server) {
    return (req, res) => {
        const id = req.params.id;
        const data = get(server.recorder.messages, id);
        res.json(data || {});
    };
}
exports.messageDetails = messageDetails;
function errorDetails(server) {
    return (req, res) => {
        const id = req.params.id;
        const data = get(server.recorder.errors, id);
        res.json(data || {});
    };
}
exports.errorDetails = errorDetails;
