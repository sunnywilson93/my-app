"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = exports.isInDirectory = exports.toFile = exports.asScript = exports.asJson = exports.toAbsolute = exports.ls = exports.mk = exports.isFile = void 0;
const chokidar = require("chokidar");
const fs_1 = require("fs");
const path_1 = require("path");
function isFile(file) {
    return fs_1.statSync(file).isFile();
}
exports.isFile = isFile;
function mk(directory) {
    if (!fs_1.existsSync(directory)) {
        directory.split(path_1.sep).reduce((parentDir, childDir) => {
            const curDir = path_1.resolve(parentDir, childDir);
            if (!fs_1.existsSync(curDir)) {
                fs_1.mkdirSync(curDir);
            }
            return curDir;
        }, path_1.sep);
        return true;
    }
    return false;
}
exports.mk = mk;
function ls(directory) {
    if (fs_1.existsSync(directory)) {
        return fs_1.readdirSync(directory);
    }
    return [];
}
exports.ls = ls;
function toAbsolute(directory) {
    return (file) => path_1.join(directory, file);
}
exports.toAbsolute = toAbsolute;
function asJson(file) {
    if (fs_1.existsSync(file)) {
        const content = fs_1.readFileSync(file, 'utf8');
        return JSON.parse(content);
    }
    return undefined;
}
exports.asJson = asJson;
function asScript(file) {
    if (fs_1.existsSync(file)) {
        const key = require.resolve(file);
        delete require.cache[key];
        return require(file);
    }
    return () => { };
}
exports.asScript = asScript;
function toFile(file, obj) {
    const directory = path_1.dirname(file);
    mk(directory);
    fs_1.writeFileSync(file, JSON.stringify(obj));
    return file;
}
exports.toFile = toFile;
function isInDirectory(fn, dir) {
    const rel = path_1.relative(dir, fn);
    return !!rel && !rel.startsWith('..') && !path_1.isAbsolute(rel);
}
exports.isInDirectory = isInDirectory;
function installWatcher(directory, pattern, loadFile, updateFile, deleteFile) {
    mk(directory);
    return chokidar
        .watch(pattern, { cwd: directory })
        .on('change', updateFile)
        .on('add', loadFile)
        .on('unlink', deleteFile);
}
function watchSingle(directory, pattern, callback) {
    const updateFile = (file) => callback('update', path_1.resolve(directory, file));
    const deleteFile = (file) => callback('delete', path_1.resolve(directory, file));
    const loadFile = (file) => callback('create', path_1.resolve(directory, file));
    const w = installWatcher(directory, pattern, loadFile, updateFile, deleteFile);
    return {
        directory,
        close() {
            const dirs = w.getWatched();
            for (const dir of Object.keys(dirs)) {
                for (const file of dirs[dir]) {
                    callback('delete', path_1.resolve(directory, dir, file));
                }
            }
            w.close();
        },
    };
}
function watch(directory, pattern, callback) {
    if (Array.isArray(directory)) {
        const ws = directory.map((dir) => watchSingle(dir, pattern, callback));
        return {
            get directories() {
                return ws.map((w) => w.directory);
            },
            set directories(value) {
                const added = [];
                for (let i = ws.length; i--;) {
                    const w = ws[i];
                    let remove = true;
                    for (const v of value) {
                        if (w.directory === v) {
                            remove = false;
                            break;
                        }
                    }
                    if (remove) {
                        ws.splice(i, 1);
                        w.close();
                    }
                }
                for (const v of value) {
                    let add = true;
                    for (const w of ws) {
                        if (w.directory === v) {
                            add = false;
                            break;
                        }
                    }
                    if (add) {
                        added.push(watchSingle(v, pattern, callback));
                    }
                }
                ws.push(...added);
            },
            close() {
                ws.forEach((w) => w.close());
            },
        };
    }
    else if (typeof directory === 'string') {
        return watch([directory], pattern, callback);
    }
}
exports.watch = watch;
