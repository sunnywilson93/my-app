"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withMiddlewares = void 0;
const path_1 = require("path");
function findMiddleware(modulePath) {
    try {
        return require(modulePath);
    }
    catch (e) {
        return undefined;
    }
}
function findFirstMiddleware(paths) {
    for (const path of paths) {
        const creator = findMiddleware(path);
        if (creator) {
            return creator;
        }
    }
}
function createMiddleware(server, config, source, options) {
    const creator = findFirstMiddleware([source, path_1.resolve(config.directory, source)]) ||
        findFirstMiddleware((config.sources || []).map((dir) => path_1.resolve(dir, source))) ||
        findFirstMiddleware([path_1.resolve(process.cwd(), source), path_1.resolve(__dirname, source)]);
    if (typeof creator === 'function') {
        const handler = creator(...options);
        if (typeof handler === 'function') {
            return {
                options,
                source,
                active: true,
                handler,
            };
        }
    }
    else if (creator && typeof creator.setup === 'function') {
        creator.setup(server, config);
    }
    return undefined;
}
function integrateMiddlewares(server) {
    if (server.middlewares.length) {
        const all = server.at('*');
        for (const middleware of server.middlewares) {
            all.any(middleware.handler);
        }
    }
}
function withMiddlewares(server, config) {
    const middlewareDefinitions = config.middlewares || [];
    for (const definition of middlewareDefinitions) {
        const source = definition.source;
        const options = definition.options || [];
        const middleware = createMiddleware(server, config, source, options);
        if (middleware) {
            server.middlewares.push(middleware);
        }
    }
    integrateMiddlewares(server);
}
exports.withMiddlewares = withMiddlewares;
