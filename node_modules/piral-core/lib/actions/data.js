"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryWriteDataItem = exports.writeDataItem = exports.readDataValue = exports.readDataItem = exports.resetData = void 0;
const utils_1 = require("../utils");
function resetData(ctx) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { data: {} })));
}
exports.resetData = resetData;
function readDataItem(ctx, key) {
    return ctx.readState((state) => state.data[key]);
}
exports.readDataItem = readDataItem;
function readDataValue(ctx, key) {
    const item = readDataItem(ctx, key);
    return item && item.value;
}
exports.readDataValue = readDataValue;
function writeDataItem(ctx, key, value, owner, target, expires) {
    const isNull = !value && typeof value === 'object';
    const data = isNull
        ? value
        : {
            value,
            owner,
            target,
            expires,
        };
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { data: (0, utils_1.updateKey)(state.data, key, data) })));
    ctx.emit('store-data', {
        name: key,
        target,
        value,
        owner,
        expires,
    });
}
exports.writeDataItem = writeDataItem;
function tryWriteDataItem(ctx, key, value, owner, target, expires) {
    const item = readDataItem(ctx, key);
    if (item && item.owner !== owner) {
        console.error(`Invalid data write to '${key}'. This item currently belongs to '${item.owner}' (write attempted from '${owner}'). The action has been ignored.`);
        return false;
    }
    writeDataItem(ctx, key, value, owner, target, expires);
    return true;
}
exports.tryWriteDataItem = tryWriteDataItem;
//# sourceMappingURL=data.js.map