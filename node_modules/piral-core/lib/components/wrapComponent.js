"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapComponent = void 0;
const React = require("react");
const react_router_1 = require("react-router");
const PortalRenderer_1 = require("./PortalRenderer");
const ForeignComponentContainer_1 = require("./ForeignComponentContainer");
const hooks_1 = require("../hooks");
const utils_1 = require("../utils");
// this is an arbitrary start number to have 6 digits
let portalIdBase = 123456;
function wrapReactComponent(Component, captured, Wrapper) {
    return (props) => (React.createElement(Wrapper, Object.assign({}, props),
        React.createElement(Component, Object.assign({}, props, captured))));
}
function wrapForeignComponent(component, captured, Wrapper) {
    return React.memo((props) => {
        const { state, readState, destroyPortal } = (0, hooks_1.useGlobalStateContext)();
        const router = React.useContext(react_router_1.__RouterContext);
        const id = React.useMemo(() => (portalIdBase++).toString(26), utils_1.none);
        const context = React.useMemo(() => ({ router, state, readState }), [router, state]);
        const innerProps = React.useMemo(() => (Object.assign(Object.assign({}, props), captured)), [props]);
        React.useEffect(() => () => destroyPortal(id), utils_1.none);
        return (React.createElement(Wrapper, Object.assign({}, props),
            React.createElement(PortalRenderer_1.PortalRenderer, { id: id }),
            React.createElement(ForeignComponentContainer_1.ForeignComponentContainer, { innerProps: innerProps, "$portalId": id, "$component": component, "$context": context })));
    });
}
function isNotExotic(component) {
    return !component.$$typeof;
}
function wrapComponent(converters, component, captured, Wrapper) {
    if (!component) {
        const pilet = captured.piral.meta.name;
        console.error(`[${pilet}] The given value is not a valid component.`);
        // tslint:disable-next-line:no-null-keyword
        component = () => null;
    }
    if (typeof component === 'object' && isNotExotic(component)) {
        const result = (0, utils_1.convertComponent)(converters[component.type], component);
        return wrapForeignComponent(result, captured, Wrapper);
    }
    return wrapReactComponent(component, captured, Wrapper);
}
exports.wrapComponent = wrapComponent;
//# sourceMappingURL=wrapComponent.js.map