"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderElement = void 0;
const components_1 = require("../components");
const utils_1 = require("../utils");
if (typeof window !== 'undefined' && 'customElements' in window) {
    class PiralExtension extends HTMLElement {
        constructor() {
            super(...arguments);
            this.dispose = utils_1.noop;
            this.update = utils_1.noop;
            this.props = {
                name: this.getAttribute('name'),
                params: (0, utils_1.tryParseJson)(this.getAttribute('params')),
                empty: undefined,
                children: (0, utils_1.reactifyContent)(this.childNodes),
            };
        }
        get params() {
            return this.props.params;
        }
        set params(value) {
            this.props.params = value;
            this.update(this.props);
        }
        get name() {
            return this.props.name;
        }
        set name(value) {
            this.props.name = value;
            this.update(this.props);
        }
        get empty() {
            return this.props.empty;
        }
        set empty(value) {
            this.props.empty = value;
            this.update(this.props);
        }
        connectedCallback() {
            if (this.isConnected) {
                this.dispatchEvent(new CustomEvent('render-html', {
                    bubbles: true,
                    detail: {
                        target: this,
                        props: this.props,
                    },
                }));
            }
        }
        disconnectedCallback() {
            this.dispose();
            this.dispose = utils_1.noop;
            this.update = utils_1.noop;
        }
        attributeChangedCallback(name, _, newValue) {
            switch (name) {
                case 'name':
                    this.name = newValue;
                    break;
                case 'params':
                    this.params = (0, utils_1.tryParseJson)(newValue);
                    break;
            }
        }
        static get observedAttributes() {
            return ['name', 'params'];
        }
    }
    customElements.define('piral-extension', PiralExtension);
}
function renderElement(context, element, props) {
    let [id, portal] = (0, utils_1.renderInDom)(context, element, components_1.ExtensionSlot, props);
    const evName = 'extension-props-changed';
    const handler = (ev) => update(ev.detail);
    const dispose = () => {
        context.hidePortal(id, portal);
        element.removeEventListener(evName, handler);
    };
    const update = (newProps) => {
        [id, portal] = (0, utils_1.changeDomPortal)(id, portal, context, element, components_1.ExtensionSlot, newProps);
    };
    element.addEventListener(evName, handler);
    return [dispose, update];
}
exports.renderElement = renderElement;
//# sourceMappingURL=element.js.map