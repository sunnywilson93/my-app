"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInstance = void 0;
const tslib_1 = require("tslib");
const piral_base_1 = require("piral-base");
const modules_1 = require("./modules");
const state_1 = require("./state");
const helpers_1 = require("./helpers");
const utils_1 = require("./utils");
/**
 * Creates a new PiralInstance component, which can be used for
 * bootstrapping the application easily.
 *
 * @example
```jsx
const instance = createInstance({
  requestPilets() {
    return fetch(...);
  },
});

const app = (
  <Piral instance={instance}>
    <Define name="Layout" component={MyLayout} />
  </Piral>
);
render(app, document.querySelector('#app'));
```
 */
function createInstance(config = {}) {
    const { id = (0, utils_1.generateId)(), state, actions, availablePilets = [], plugins, requestPilets = modules_1.defaultModuleRequester, loaderConfig, async = false, shareDependencies = modules_1.defaultDependencySelector, loadPilet, loaders, debug, apiFactory = modules_1.defaultApiFactory, } = config;
    const globalState = (0, state_1.createGlobalState)(state);
    const events = (0, piral_base_1.createListener)(globalState);
    const context = (0, state_1.createActions)(globalState, events);
    const definedPlugins = plugins || [];
    const usedPlugins = Array.isArray(definedPlugins) ? definedPlugins : [definedPlugins];
    const createApi = apiFactory(context, usedPlugins);
    const root = createApi({
        name: 'root',
        version: process.env.BUILD_PCKG_VERSION || '1.0.0',
        spec: '',
    });
    const options = (0, helpers_1.createPiletOptions)({
        context,
        createApi,
        loaders,
        loadPilet,
        availablePilets,
        loaderConfig,
        shareDependencies,
        strategy: (0, piral_base_1.isfunc)(async) ? async : async ? piral_base_1.blazingStrategy : piral_base_1.standardStrategy,
        requestPilets,
        debug,
    });
    if (actions) {
        (0, state_1.includeActions)(context, actions);
    }
    context.options = options;
    return (0, tslib_1.__assign)(events, {
        id,
        createApi,
        context,
        root,
        options,
    });
}
exports.createInstance = createInstance;
//# sourceMappingURL=createInstance.js.map