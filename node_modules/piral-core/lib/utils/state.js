"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withRoute = exports.withProvider = exports.withRootExtension = exports.withoutExtension = exports.withExtension = exports.withoutPage = exports.withPage = exports.withAll = void 0;
const react_1 = require("react");
const extension_1 = require("./extension");
const helpers_1 = require("./helpers");
/**
 * Returns a dispatcher that includes all mentioned dispatchers.
 * @param dispatchers The dispatchers to include.
 */
function withAll(...dispatchers) {
    return (state) => {
        for (const dispatcher of dispatchers) {
            state = dispatcher(state);
        }
        return state;
    };
}
exports.withAll = withAll;
/**
 * Returns a dispatcher that adds a page registration.
 * @param name The path of the page to register.
 * @param value The value of the page to register.
 * @returns The dispatcher.
 */
function withPage(name, value) {
    return (state) => (Object.assign(Object.assign({}, state), { registry: Object.assign(Object.assign({}, state.registry), { pages: (0, helpers_1.withKey)(state.registry.pages, name, value) }) }));
}
exports.withPage = withPage;
/**
 * Returns a dispatcher that removes a page registration.
 * @param name The path of the page to unregister.
 * @returns The dispatcher.
 */
function withoutPage(name) {
    return (state) => (Object.assign(Object.assign({}, state), { registry: Object.assign(Object.assign({}, state.registry), { pages: (0, helpers_1.withoutKey)(state.registry.pages, name) }) }));
}
exports.withoutPage = withoutPage;
/**
 * Returns a dispatcher that adds an extension registration.
 * @param name The name of the extension to register.
 * @param value The value of the extension to register.
 * @returns The dispatcher.
 */
function withExtension(name, value) {
    return (state) => (Object.assign(Object.assign({}, state), { registry: Object.assign(Object.assign({}, state.registry), { extensions: (0, helpers_1.withKey)(state.registry.extensions, name, (0, helpers_1.appendItem)(state.registry.extensions[name], value)) }) }));
}
exports.withExtension = withExtension;
/**
 * Returns a dispatcher that removes an extension registration.
 * @param name The name of the extension to unregister.
 * @param reference The reference for the extension.
 * @returns The dispatcher.
 */
function withoutExtension(name, reference) {
    return (state) => (Object.assign(Object.assign({}, state), { registry: Object.assign(Object.assign({}, state.registry), { extensions: (0, helpers_1.withKey)(state.registry.extensions, name, (0, helpers_1.excludeOn)(state.registry.extensions[name], (m) => m.reference === reference)) }) }));
}
exports.withoutExtension = withoutExtension;
/**
 * Returns a dispatcher that adds an extension registration from the root (no Pilet API).
 * @param name The name of the extension to register.
 * @param component The extension's component to use.
 * @returns The dispatcher.
 */
function withRootExtension(name, component) {
    return withExtension(name, {
        component: (0, extension_1.toExtension)(component),
        defaults: {},
        pilet: '',
        reference: component,
    });
}
exports.withRootExtension = withRootExtension;
/**
 * Returns a dispatcher that adds another provider.
 * @param provider The provider to include.
 * @returns The dispatcher.
 */
function withProvider(provider) {
    const wrapper = (props) => (0, react_1.cloneElement)(provider, props);
    return (state) => (Object.assign(Object.assign({}, state), { provider: !state.provider ? wrapper : (props) => (0, react_1.createElement)(state.provider, undefined, wrapper(props)) }));
}
exports.withProvider = withProvider;
/**
 * Returns a dispatcher that registers another route.
 * @param path The path of the route to register.
 * @param component The component representing the route.
 * @returns The dispatcher.
 */
function withRoute(path, component) {
    return (state) => (Object.assign(Object.assign({}, state), { routes: (0, helpers_1.withKey)(state.routes, path, component) }));
}
exports.withRoute = withRoute;
//# sourceMappingURL=state.js.map