import * as React from 'react';
import { StaticRouter } from 'react-router';
import { PiralRoutes } from './PiralRoutes';
import { PiralError, PiralRouter, PiralLoadingIndicator, PiralRouteSwitch, PiralLayout, PiralDebug, } from './components';
import { useGlobalState } from '../hooks';
const NotFound = (props) => React.createElement(PiralError, Object.assign({ type: "not_found" }, props));
const PiralContent = () => {
    const { error, loading, layout } = useGlobalState((m) => m.app);
    return error ? (React.createElement(PiralError, { type: "loading", error: error })) : loading ? (React.createElement(PiralLoadingIndicator, null)) : (React.createElement(PiralLayout, { currentLayout: layout },
        React.createElement(PiralRoutes, { NotFound: NotFound, RouteSwitch: PiralRouteSwitch })));
};
const FallbackRouter = (props) => {
    const publicPath = useGlobalState((s) => s.app.publicPath);
    return React.createElement(StaticRouter, Object.assign({ location: "/" }, props, { basename: publicPath }));
};
const Router = typeof window === 'undefined' ? FallbackRouter : PiralRouter;
const PiralProvider = ({ children }) => {
    const provider = useGlobalState((m) => m.provider) || React.Fragment;
    return React.createElement(provider, undefined, children);
};
/**
 * The component responsible for the generic view of the application.
 * This includes the global providers, the used Router, the current content and some convenience.
 */
export const PiralView = ({ children }) => (React.createElement(PiralProvider, null,
    React.createElement(Router, null,
        React.createElement(PiralContent, null),
        children,
        React.createElement(PiralDebug, null))));
PiralView.displayName = 'PiralView';
//# sourceMappingURL=PiralView.js.map