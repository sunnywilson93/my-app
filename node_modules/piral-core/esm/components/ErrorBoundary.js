import { __rest } from "tslib";
import * as React from 'react';
import { PiralError, PiralLoadingIndicator } from './components';
/**
 * The component for catching errors and displaying error information.
 */
export class ErrorBoundary extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            error: undefined,
        };
    }
    componentDidCatch(error) {
        const { piral, errorType } = this.props;
        const pilet = piral.meta.name;
        console.error(`[${pilet}] Exception in component of type "${errorType}".`, error);
        this.setState({
            error,
        });
    }
    render() {
        const _a = this.props, { children, piral, errorType } = _a, renderProps = __rest(_a, ["children", "piral", "errorType"]);
        const { error } = this.state;
        const rest = renderProps;
        if (error) {
            const pilet = piral.meta.name;
            return React.createElement(PiralError, Object.assign({ type: errorType, error: error, pilet: pilet }, rest));
        }
        return React.createElement(React.Suspense, { fallback: React.createElement(PiralLoadingIndicator, null) }, children);
    }
}
//# sourceMappingURL=ErrorBoundary.js.map