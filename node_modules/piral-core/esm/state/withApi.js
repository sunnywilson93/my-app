import * as React from 'react';
import { ErrorBoundary, wrapComponent } from '../components';
import { defaultRender } from '../utils';
const DefaultWrapper = (props) => defaultRender(props.children);
function getWrapper(wrappers, wrapperType) {
    const WrapAll = wrappers['*'];
    const WrapType = wrappers[wrapperType];
    if (WrapAll && WrapType) {
        return (props) => (React.createElement(WrapAll, Object.assign({}, props),
            React.createElement(WrapType, Object.assign({}, props))));
    }
    return WrapType || WrapAll || DefaultWrapper;
}
function makeWrapper(context, outerProps, wrapperType, errorType) {
    const OuterWrapper = context.readState((m) => getWrapper(m.registry.wrappers, wrapperType));
    return (props) => (React.createElement(OuterWrapper, Object.assign({}, outerProps, props),
        React.createElement(ErrorBoundary, Object.assign({}, outerProps, props, { errorType: errorType }), props.children)));
}
export function withApi(context, component, piral, errorType, wrapperType = errorType, captured = {}) {
    const outerProps = Object.assign(Object.assign({}, captured), { piral });
    const converters = context.converters;
    const Wrapper = makeWrapper(context, outerProps, wrapperType, errorType);
    return wrapComponent(converters, component, outerProps, Wrapper);
}
//# sourceMappingURL=withApi.js.map