import { withKey, replaceOrAddItem, removeNested, withProvider, withRoute } from '../utils';
export function changeLayout(ctx, current) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { app: withKey(state.app, 'layout', current) })));
}
export function initialize(ctx, loading, error, modules) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { app: Object.assign(Object.assign({}, state.app), { error,
            loading }), modules })));
}
export function injectPilet(ctx, pilet) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { modules: replaceOrAddItem(state.modules, pilet, (m) => m.name === pilet.name), registry: removeNested(state.registry, (m) => m.pilet === pilet.name) })));
    ctx.emit('unload-pilet', {
        name: pilet.name,
    });
}
export function setComponent(ctx, name, component) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { components: withKey(state.components, name, component) })));
}
export function setErrorComponent(ctx, type, component) {
    ctx.dispatch((state) => (Object.assign(Object.assign({}, state), { errorComponents: withKey(state.errorComponents, type, component) })));
}
export function setRoute(ctx, path, component) {
    ctx.dispatch(withRoute(path, component));
}
export function includeProvider(ctx, provider) {
    ctx.dispatch(withProvider(provider));
}
//# sourceMappingURL=app.js.map