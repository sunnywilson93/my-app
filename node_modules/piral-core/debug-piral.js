"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.integrate = void 0;
var react_atom_1 = require("@dbeining/react-atom");
var piral_debug_utils_1 = require("piral-debug-utils");
function integrate(context, options, debug) {
    if (debug === void 0) { debug = {}; }
    (0, piral_debug_utils_1.installPiralDebug)(__assign(__assign({}, debug), { createApi: options.createApi, loadPilet: options.loadPilet, injectPilet: context.injectPilet, fireEvent: context.emit, getDependencies: function () {
            return Object.keys(options.dependencies);
        }, getExtensions: function () {
            return context.readState(function (s) { return Object.keys(s.registry.extensions); });
        }, getRoutes: function () {
            var registeredRoutes = context.readState(function (state) { return Object.keys(state.registry.pages); });
            var componentRoutes = context.readState(function (state) { return Object.keys(state.routes); });
            return __spreadArray(__spreadArray([], componentRoutes, true), registeredRoutes, true);
        }, getGlobalState: function () {
            return context.readState(function (s) { return s; });
        }, getPilets: function () {
            return context.readState(function (s) { return s.modules; });
        }, setPilets: function (modules) {
            context.dispatch(function (state) { return (__assign(__assign({}, state), { modules: modules })); });
        }, integrate: function (dbg) {
            context.dispatch(function (s) { return (__assign(__assign({}, s), { components: __assign(__assign({}, s.components), dbg.components), routes: __assign(__assign({}, s.routes), dbg.routes), registry: __assign(__assign({}, s.registry), { wrappers: __assign(__assign({}, s.registry.wrappers), dbg.wrappers) }) })); });
            (0, react_atom_1.addChangeHandler)(context.state, 'debugging', function (_a) {
                var previous = _a.previous, current = _a.current;
                var pilets = current.modules !== previous.modules;
                var pages = current.registry.pages !== previous.registry.pages || current.routes !== previous.routes;
                var extensions = current.registry.extensions !== previous.registry.extensions;
                var state = current !== previous;
                dbg.onChange(previous, current, {
                    pilets: pilets,
                    pages: pages,
                    extensions: extensions,
                    state: state
                });
            });
        } }));
}
exports.integrate = integrate;
